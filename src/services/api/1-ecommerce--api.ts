/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 0.0.1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export type UsersSerializerRole = typeof UsersSerializerRole[keyof typeof UsersSerializerRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersSerializerRole = {
  'super-admin': 'super-admin',
  admin: 'admin',
  user: 'user',
} as const;

export interface UsersSerializer {
  id: number;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  isPhoneVerified: number;
  role: UsersSerializerRole;
}

export interface UpdateUserRoleDto {
  role: string;
}

export interface UpdateMyProfileDto {
  firstName?: string;
  lastName?: string;
}

export interface SendOtpCodeToPhoneDto {
  phone: string;
}

export interface VerifyOtpCodeToPhoneDto {
  phone: string;
  code: string;
}

export interface SignUpDto {
  firstName?: string;
  lastName: string;
  password: string;
}

export interface CreateProductCategoryDto {
  title: string;
  image?: Blob;
}

export interface ProductCategoriesSerializer {
  id: number;
  title: string;
  slug: string;
  image: string;
  createdAt: string;
  updatedAt: string;
}

export interface UpdateProductCategoryDto {
  title?: string;
  image?: Blob;
}

export interface CreateProductDto {
  title: string;
  summary: string;
  basePrice?: number;
  baseDiscount?: number;
  stockQuantity?: number;
  category?: number;
  brand?: number;
  thumbnailImage: Blob;
  images: Blob[];
  isWholeSale?: boolean;
  isFeatured?: boolean;
}

export interface ProductBrandCategoriesSerializer {
  id: number;
  title: string;
  linkUrl: string;
  image: string;
  createdAt: string;
  updatedAt: string;
}

export interface ProductBrandsSerializer {
  id: number;
  title: string;
  slug: string;
  image: string;
  secondImage: string;
  categories: ProductBrandCategoriesSerializer[];
  createdAt: string;
  updatedAt: string;
}

export interface ProductsSerializer {
  id: number;
  title: string;
  slug: string;
  summary: string;
  basePrice: string;
  baseDiscount: number;
  stockQuantity: number;
  hasVariants: boolean;
  thumbnailImage: string;
  images: string[];
  category: ProductCategoriesSerializer;
  brand: ProductBrandsSerializer;
  isWholeSale: boolean;
  isFeatured: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface UpdateProductDto {
  title?: string;
  summary?: string;
  basePrice?: number;
  baseDiscount?: number;
  stockQuantity?: number;
  thumbnailImage?: Blob;
  category?: number;
  brand?: number;
  isWholeSale?: boolean;
  isFeatured?: boolean;
}

export interface CreateProductBrandDto {
  title: string;
  slug: string;
  image?: Blob;
  secondImage?: Blob;
  /** Array of category IDs or comma-separated string */
  categoryIds?: string[];
}

export interface UpdateProductBrandDto {
  title?: string;
  slug?: string;
  image?: Blob;
  secondImage?: Blob;
  /** Array of category IDs or comma-separated string */
  categoryIds?: string[];
}

export type CreateProductVariantDtoProperties = { [key: string]: unknown };

export interface CreateProductVariantDto {
  price: number;
  discount?: number;
  properties: CreateProductVariantDtoProperties;
  stockQuantity: number;
  isActive: boolean;
}

export type ProductVariantsSerializerProperties = { [key: string]: unknown };

export interface ProductVariantsSerializer {
  id: number;
  product: ProductsSerializer;
  price: string;
  discount: number;
  properties: ProductVariantsSerializerProperties;
  stockQuantity: number;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export type CheckProductVariantAvailabilityDtoProperties = { [key: string]: unknown };

export interface CheckProductVariantAvailabilityDto {
  properties: CheckProductVariantAvailabilityDtoProperties;
}

export type ProductVariantAvailabilitySerializerPrice = { [key: string]: unknown };

export type ProductVariantAvailabilitySerializerVariantId = { [key: string]: unknown };

export type ProductVariantAvailabilitySerializerDiscount = { [key: string]: unknown };

export interface ProductVariantAvailabilitySerializer {
  available: boolean;
  price: ProductVariantAvailabilitySerializerPrice;
  stockQuantity: number;
  variantId: ProductVariantAvailabilitySerializerVariantId;
  discount: ProductVariantAvailabilitySerializerDiscount;
}

export type UpdateProductVariantDtoProperties = { [key: string]: unknown };

export interface UpdateProductVariantDto {
  price?: number;
  discount?: number;
  properties?: UpdateProductVariantDtoProperties;
  stockQuantity?: number;
  isActive?: boolean;
}

export interface FavoriteProductsSerializer {
  id: number;
  user: UsersSerializer;
  product: ProductsSerializer;
  createdAt: string;
  updatedAt: string;
}

export interface CreateProductCommentDto {
  /**
   * Comment content
   * @maxLength 1000
   */
  content: string;
  /** Product ID */
  productId: number;
}

export type ECommentStatus = typeof ECommentStatus[keyof typeof ECommentStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ECommentStatus = {
  pending: 'pending',
  accepted: 'accepted',
  rejected: 'rejected',
} as const;

export interface ProductCommentsSerializer {
  id: number;
  content: string;
  status: ECommentStatus;
  user: UsersSerializer;
  product: ProductsSerializer;
  createdAt: string;
  updatedAt: string;
}

export interface UpdateProductCommentDto {
  /**
   * Updated comment content
   * @maxLength 1000
   */
  content: string;
}

export interface AdminUpdateCommentStatusDto {
  /** Comment status */
  status: ECommentStatus;
}

export type ShoppingCartItemsSerializerAdditionalProperties = { [key: string]: unknown };

export interface ShoppingCartItemsSerializer {
  id: number;
  product: ProductsSerializer;
  price: number;
  discount: number;
  quantity: number;
  finalPrice: number;
  additionalProperties: ShoppingCartItemsSerializerAdditionalProperties;
  createdAt: string;
  updatedAt: string;
}

export interface ShoppingCartsSerializer {
  id: number;
  user: UsersSerializer;
  items: ShoppingCartItemsSerializer[];
  createdAt: string;
  updatedAt: string;
}

export interface CreateShoppingCartItemDto {
  quantity: number;
}

export interface UpdateShoppingCartItemDto {
  quantity?: number;
}

export interface CreateWeblogCategoryDto {
  title: string;
  slug: string;
}

export interface WeblogCategorySerializer {
  id: number;
  title: string;
  slug: string;
  createdAt: string;
  updatedAt: string;
}

export interface UpdateWeblogCategoryDto {
  title?: string;
  slug?: string;
}

export interface CreateWeblogArticleDto {
  title: string;
  summary: string;
  content: string;
  slug?: string;
  tags: string[];
  /** ID of the weblog category */
  category?: number;
  thumbnailImage?: Blob;
}

export interface WeblogArticleSerializer {
  id: number;
  title: string;
  slug: string;
  summary: string;
  content: string;
  tags: string[];
  thumbnailImage?: string;
  category?: WeblogCategorySerializer;
  createdAt: string;
  updatedAt: string;
}

export interface UpdateWeblogArticleDto {
  title?: string;
  summary?: string;
  content?: string;
  slug?: string;
  tags?: string[];
  /** ID of the weblog category */
  category?: number;
  thumbnailImage?: Blob;
}

export interface ShippingAddressDto {
  fullName: string;
  phone: string;
  address: string;
  city: string;
  postalCode: string;
  state?: string;
}

export interface CreateOrderDto {
  sendingWayId?: number;
  shippingAddress: ShippingAddressDto;
  notes?: string;
}

export interface SendingWaysSerializer {
  id: number;
  title: string;
  description: string;
  cost: string;
  estimatedDeliveryDays: number;
  isActive: boolean;
  sortOrder: number;
  createdAt: string;
  updatedAt: string;
}

export type OrderItemsSerializerProductSnapshot = { [key: string]: unknown };

export interface OrderItemsSerializer {
  id: number;
  product: ProductsSerializer;
  quantity: number;
  unitPrice: string;
  discount: number;
  totalPrice: string;
  productSnapshot: OrderItemsSerializerProductSnapshot;
  createdAt: string;
  updatedAt: string;
}

export type OrdersSerializerShippingAddress = { [key: string]: unknown };

export interface OrdersSerializer {
  id: number;
  orderNumber: string;
  user: UsersSerializer;
  sendingWay: SendingWaysSerializer;
  subtotal: string;
  totalDiscount: string;
  shippingCost: string;
  totalAmount: string;
  status: string;
  shippingAddress: OrdersSerializerShippingAddress;
  notes: string;
  items: OrderItemsSerializer[];
  shippedAt: string;
  deliveredAt: string;
  createdAt: string;
  updatedAt: string;
}

export type UpdateOrderStatusDtoStatus = typeof UpdateOrderStatusDtoStatus[keyof typeof UpdateOrderStatusDtoStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateOrderStatusDtoStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  processing: 'processing',
  shipped: 'shipped',
  delivered: 'delivered',
  cancelled: 'cancelled',
} as const;

export interface UpdateOrderStatusDto {
  status: UpdateOrderStatusDtoStatus;
}

export interface CreateSendingWayDto {
  title: string;
  description: string;
  cost: string;
  estimatedDeliveryDays: number;
  isActive?: boolean;
  sortOrder?: number;
}

export interface UpdateSendingWayDto {
  title?: string;
  description?: string;
  cost?: string;
  estimatedDeliveryDays?: number;
  isActive?: boolean;
  sortOrder?: number;
}

export interface CreatePaymentDto {
  orderId: number;
  description?: string;
  callbackUrl: string;
}

export interface VerifyPaymentDto {
  trackId: number;
}

export interface PaymentsSerializer {
  id: number;
  paymentNumber: string;
  order: OrdersSerializer;
  user: UsersSerializer;
  amount: string;
  paymentMethod: string;
  status: string;
  trackId: number;
  refNumber: string;
  cardNumber: string;
  description: string;
  paidAt: string;
  expiredAt: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateWholeSellersDto {
  firstName: string;
  lastName: string;
  nationalCode: string;
  companyName: string;
  nationalCardPhoto: Blob;
  businessLicensePhoto: Blob;
  creditCardOrShaba: string;
}

export type WholeSellersSerializerStatus = typeof WholeSellersSerializerStatus[keyof typeof WholeSellersSerializerStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WholeSellersSerializerStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
} as const;

export interface WholeSellersSerializer {
  id: number;
  firstName: string;
  lastName: string;
  nationalCode: string;
  companyName: string;
  nationalCardPhoto: string;
  businessLicensePhoto: string;
  creditCardOrShaba: string;
  status: WholeSellersSerializerStatus;
  rejectionReason: string;
  user: UsersSerializer;
  createdAt: string;
  updatedAt: string;
}

export interface UpdateWholeSellersDto {
  firstName?: string;
  lastName?: string;
  nationalCode?: string;
  companyName?: string;
  nationalCardPhoto?: Blob;
  businessLicensePhoto?: Blob;
  creditCardOrShaba?: string;
}

export type AdminUpdateWholeSellersDtoStatus = typeof AdminUpdateWholeSellersDtoStatus[keyof typeof AdminUpdateWholeSellersDtoStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AdminUpdateWholeSellersDtoStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
} as const;

export interface AdminUpdateWholeSellersDto {
  status: AdminUpdateWholeSellersDtoStatus;
  rejectionReason?: string;
}

export interface CreateHeroBannerDto {
  image: Blob;
  linkUrl?: string;
  sortOrder?: number;
}

export interface HeroBannersSerializer {
  id: number;
  image: string;
  linkUrl: string;
  sortOrder: number;
  createdAt: string;
  updatedAt: string;
}

export interface UpdateHeroBannerDto {
  image?: Blob;
  linkUrl?: string;
  sortOrder?: number;
}

export interface CreateApplicationBannerDto {
  title?: string;
  linkUrl: string;
  image?: Blob;
  sortOrder?: number;
  group?: string;
}

export interface ApplicationBannersSerializer {
  id: number;
  title: string;
  linkUrl: string;
  image: string;
  sortOrder: number;
  group: string;
  createdAt: string;
  updatedAt: string;
}

export interface UpdateApplicationBannerDto {
  title?: string;
  linkUrl?: string;
  image?: Blob;
  sortOrder?: number;
  group?: string;
}

export interface CreateProductBrandCategoryDto {
  title: string;
  linkUrl: string;
  image?: Blob;
}

export interface UpdateProductBrandCategoryDto {
  title?: string;
  linkUrl?: string;
  image?: Blob;
}

export interface CreatePopularBrandDto {
  title: string;
  description?: string;
  linkUrl?: string;
  isActive?: boolean;
  sortOrder?: number;
  image?: Blob;
  secondImage?: Blob;
}

export interface PopularBrandsSerializer {
  id: number;
  title: string;
  slug: string;
  image: string;
  secondImage: string;
  description: string;
  linkUrl: string;
  isActive: boolean;
  sortOrder: number;
  createdAt: string;
  updatedAt: string;
}

export interface UpdatePopularBrandDto {
  title?: string;
  description?: string;
  linkUrl?: string;
  isActive?: boolean;
  sortOrder?: number;
  image?: Blob;
  secondImage?: Blob;
}

export type FindManyUsersAndCountQueryParams = {
limit?: number;
skip?: number;
phoneNumber?: string;
};

export type FindManyUsersAndCountQuery200 = {
  data?: UsersSerializer[];
  count?: number;
};

export type SendPhoneVerificationOtpCodeMutation200 = {
  isLoggedIn?: boolean;
  shortTermAccessToken?: string;
};

export type Login200 = {
  access_token?: string;
};

export type FindManyProductCategoriesQueryParams = {
limit?: number;
skip: number;
};

export type FindManyProductCategoriesQuery200 = {
  data?: ProductCategoriesSerializer[];
  count?: number;
};

export type FindManyAndCountProductsQueryParams = {
order?: string;
minPrice?: number;
maxPrice?: number;
category?: string;
available?: boolean;
skip?: number;
limit?: number;
title?: string;
brand?: number;
isWholesale?: boolean;
isFeatured?: boolean;
discount?: FindManyAndCountProductsQueryDiscount;
};

export type FindManyAndCountProductsQueryDiscount = typeof FindManyAndCountProductsQueryDiscount[keyof typeof FindManyAndCountProductsQueryDiscount];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyAndCountProductsQueryDiscount = {
  ASC: 'ASC',
  DESC: 'DESC',
} as const;

export type FindManyAndCountProductsQuery200 = {
  data?: ProductsSerializer[];
  count?: number;
};

export type FindManyProductBrandsQueryParams = {
skip?: number;
limit?: number;
/**
 * Array of category IDs or comma-separated string
 */
categoryIds?: string[];
};

export type FindManyProductBrandsQuery200 = {
  data?: ProductBrandsSerializer[];
  count?: number;
};

export type CreateProductVariantMutationParams = {
productId: number;
};

export type CheckProductVariantAvailabilityQueryParams = {
productId: number;
};

export type GetVariantPropertiesQueryParams = {
productId: number;
};

export type GetVariantPropertiesQuery200 = string | number | boolean;

export type AddToMyFavoriteProductsMutationParams = {
productId: number;
};

export type FindAllCommentsQueryParams = {
status?: FindAllCommentsQueryStatus;
};

export type FindAllCommentsQueryStatus = typeof FindAllCommentsQueryStatus[keyof typeof FindAllCommentsQueryStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindAllCommentsQueryStatus = {
  pending: 'pending',
  accepted: 'accepted',
  rejected: 'rejected',
} as const;

export type GetCartSummaryQuery200 = {
  itemsCount?: number;
  subtotal?: number;
  totalDiscount?: number;
  total?: number;
};

export type AddToCartMutationParams = {
productId: number;
/**
 * JSON string of variant properties
 */
variantProperties?: string;
};

export type FindManyAndCountWeblogCategoriesQueryParams = {
limit?: number;
skip?: number;
title?: string;
};

export type FindManyAndCountWeblogCategoriesQuery200 = {
  data?: WeblogCategorySerializer[];
  count?: number;
};

export type FindManyAndCountWeblogArticlesQueryParams = {
limit?: number;
skip?: number;
title?: string;
order?: FindManyAndCountWeblogArticlesQueryOrder;
tag?: string;
};

export type FindManyAndCountWeblogArticlesQueryOrder = typeof FindManyAndCountWeblogArticlesQueryOrder[keyof typeof FindManyAndCountWeblogArticlesQueryOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyAndCountWeblogArticlesQueryOrder = {
  ASC: 'ASC',
  DESC: 'DESC',
} as const;

export type FindManyAndCountWeblogArticlesQuery200 = {
  data?: WeblogArticleSerializer[];
  count?: number;
};

export type GetMyOrderStatsQuery200 = {
  total?: number;
  pending?: number;
  confirmed?: number;
  processing?: number;
  shipped?: number;
  delivered?: number;
  cancelled?: number;
};

export type GetMyOrdersQueryParams = {
limit?: number;
skip: number;
status?: GetMyOrdersQueryStatus;
};

export type GetMyOrdersQueryStatus = typeof GetMyOrdersQueryStatus[keyof typeof GetMyOrdersQueryStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMyOrdersQueryStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  processing: 'processing',
  shipped: 'shipped',
  delivered: 'delivered',
  cancelled: 'cancelled',
} as const;

export type GetMyOrdersQuery200 = {
  data?: OrdersSerializer[];
  count?: number;
};

export type GetAllOrdersQueryParams = {
limit?: number;
skip: number;
status?: GetAllOrdersQueryStatus;
};

export type GetAllOrdersQueryStatus = typeof GetAllOrdersQueryStatus[keyof typeof GetAllOrdersQueryStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAllOrdersQueryStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  processing: 'processing',
  shipped: 'shipped',
  delivered: 'delivered',
  cancelled: 'cancelled',
} as const;

export type GetAllOrdersQuery200 = {
  data?: OrdersSerializer[];
  count?: number;
};

export type FindManyAndCountSendingWaysQueryParams = {
limit?: number;
skip: number;
activeOnly: boolean;
};

export type FindManyAndCountSendingWaysQuery200 = {
  data?: SendingWaysSerializer[];
  count?: number;
};

export type CreatePaymentMutation200 = {
  payment?: PaymentsSerializer;
  paymentUrl?: string;
};

export type PaymentCallbackMutationParams = {
success: number;
status: number;
};

export type GetMyPaymentsQueryParams = {
limit?: number;
skip: number;
status?: GetMyPaymentsQueryStatus;
};

export type GetMyPaymentsQueryStatus = typeof GetMyPaymentsQueryStatus[keyof typeof GetMyPaymentsQueryStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMyPaymentsQueryStatus = {
  pending: 'pending',
  processing: 'processing',
  completed: 'completed',
  failed: 'failed',
  cancelled: 'cancelled',
  refunded: 'refunded',
} as const;

export type GetMyPaymentsQuery200 = {
  data?: PaymentsSerializer[];
  count?: number;
};

export type FindManyAndCountWholeSellersQueryParams = {
limit?: number;
skip: number;
status?: FindManyAndCountWholeSellersQueryStatus;
};

export type FindManyAndCountWholeSellersQueryStatus = typeof FindManyAndCountWholeSellersQueryStatus[keyof typeof FindManyAndCountWholeSellersQueryStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyAndCountWholeSellersQueryStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
} as const;

export type FindManyAndCountWholeSellersQuery200 = {
  data?: WholeSellersSerializer[];
  count?: number;
};

export type CheckMyWholeSellersStatusQuery200 = {
  isWholeSeller?: boolean;
};

export type CheckWholeSellersStatusByUserIdQuery200 = {
  isWholeSeller?: boolean;
};

export type FindManyHeroBannersQueryParams = {
limit?: number;
skip: number;
};

export type FindManyHeroBannersQuery200 = {
  data?: HeroBannersSerializer[];
  count?: number;
};

export type FindManyApplicationBannersQueryParams = {
limit?: number;
skip: number;
group?: string;
};

export type FindManyApplicationBannersQuery200 = {
  data?: ApplicationBannersSerializer[];
  count?: number;
};

export type FindManyProductBrandCategoriesQueryParams = {
limit?: number;
skip: number;
};

export type FindManyProductBrandCategoriesQuery200 = {
  data?: ProductBrandCategoriesSerializer[];
  count?: number;
};

export type FindManyPopularBrandsQueryParams = {
limit?: number;
skip: number;
};

export type FindManyPopularBrandsQuery200 = {
  data?: PopularBrandsSerializer[];
  count?: number;
};

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const appControllerGetHello = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/`,options
    );
  }


export const getAppControllerGetHelloQueryKey = () => {
    return [`https://ur-commerce.runflare.run/`] as const;
    }

    
export const getAppControllerGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) => appControllerGetHello({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData> & { queryKey: QueryKey }
}

export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerGetHelloQueryError = AxiosError<unknown>



export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppControllerGetHelloQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getMyProfileQuery = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/users/my-profile`,options
    );
  }


export const getGetMyProfileQueryQueryKey = () => {
    return [`https://ur-commerce.runflare.run/users/my-profile`] as const;
    }

    
export const getGetMyProfileQueryQueryOptions = <TData = Awaited<ReturnType<typeof getMyProfileQuery>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyProfileQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyProfileQueryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyProfileQuery>>> = ({ signal }) => getMyProfileQuery({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyProfileQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMyProfileQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getMyProfileQuery>>>
export type GetMyProfileQueryQueryError = AxiosError<unknown>



export function useGetMyProfileQuery<TData = Awaited<ReturnType<typeof getMyProfileQuery>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyProfileQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMyProfileQueryQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findManyUsersAndCountQuery = (
    params?: FindManyUsersAndCountQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FindManyUsersAndCountQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindManyUsersAndCountQueryQueryKey = (params?: FindManyUsersAndCountQueryParams,) => {
    return [`https://ur-commerce.runflare.run/users`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyUsersAndCountQueryQueryOptions = <TData = Awaited<ReturnType<typeof findManyUsersAndCountQuery>>, TError = AxiosError<unknown>>(params?: FindManyUsersAndCountQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyUsersAndCountQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyUsersAndCountQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyUsersAndCountQuery>>> = ({ signal }) => findManyUsersAndCountQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyUsersAndCountQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindManyUsersAndCountQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findManyUsersAndCountQuery>>>
export type FindManyUsersAndCountQueryQueryError = AxiosError<unknown>



export function useFindManyUsersAndCountQuery<TData = Awaited<ReturnType<typeof findManyUsersAndCountQuery>>, TError = AxiosError<unknown>>(
 params?: FindManyUsersAndCountQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyUsersAndCountQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindManyUsersAndCountQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findUserByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/users/${id}`,options
    );
  }


export const getFindUserByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/users/${id}`] as const;
    }

    
export const getFindUserByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findUserByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findUserByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindUserByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findUserByIdQuery>>> = ({ signal }) => findUserByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findUserByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindUserByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findUserByIdQuery>>>
export type FindUserByIdQueryQueryError = AxiosError<unknown>



export function useFindUserByIdQuery<TData = Awaited<ReturnType<typeof findUserByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findUserByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindUserByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateUserRoleMutation = (
    userId: number,
    updateUserRoleDto: UpdateUserRoleDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `https://ur-commerce.runflare.run/users/update-user-role/${userId}`,
      updateUserRoleDto,options
    );
  }



export const getUpdateUserRoleMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserRoleMutation>>, TError,{userId: number;data: UpdateUserRoleDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateUserRoleMutation>>, TError,{userId: number;data: UpdateUserRoleDto}, TContext> => {

const mutationKey = ['updateUserRoleMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserRoleMutation>>, {userId: number;data: UpdateUserRoleDto}> = (props) => {
          const {userId,data} = props ?? {};

          return  updateUserRoleMutation(userId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserRoleMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserRoleMutation>>>
    export type UpdateUserRoleMutationMutationBody = UpdateUserRoleDto
    export type UpdateUserRoleMutationMutationError = AxiosError<unknown>

    export const useUpdateUserRoleMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserRoleMutation>>, TError,{userId: number;data: UpdateUserRoleDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateUserRoleMutation>>,
        TError,
        {userId: number;data: UpdateUserRoleDto},
        TContext
      > => {

      const mutationOptions = getUpdateUserRoleMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const updateMyProfileMutation = (
    updateMyProfileDto: UpdateMyProfileDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `https://ur-commerce.runflare.run/users/update-my-profile`,
      updateMyProfileDto,options
    );
  }



export const getUpdateMyProfileMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMyProfileMutation>>, TError,{data: UpdateMyProfileDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateMyProfileMutation>>, TError,{data: UpdateMyProfileDto}, TContext> => {

const mutationKey = ['updateMyProfileMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMyProfileMutation>>, {data: UpdateMyProfileDto}> = (props) => {
          const {data} = props ?? {};

          return  updateMyProfileMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMyProfileMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateMyProfileMutation>>>
    export type UpdateMyProfileMutationMutationBody = UpdateMyProfileDto
    export type UpdateMyProfileMutationMutationError = AxiosError<unknown>

    export const useUpdateMyProfileMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMyProfileMutation>>, TError,{data: UpdateMyProfileDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateMyProfileMutation>>,
        TError,
        {data: UpdateMyProfileDto},
        TContext
      > => {

      const mutationOptions = getUpdateMyProfileMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const sendPhoneVerificationOtpCodeMutation = (
    verifyOtpCodeToPhoneDto: VerifyOtpCodeToPhoneDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SendPhoneVerificationOtpCodeMutation200>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/auth/verify-otp-code`,
      verifyOtpCodeToPhoneDto,options
    );
  }



export const getSendPhoneVerificationOtpCodeMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendPhoneVerificationOtpCodeMutation>>, TError,{data: VerifyOtpCodeToPhoneDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof sendPhoneVerificationOtpCodeMutation>>, TError,{data: VerifyOtpCodeToPhoneDto}, TContext> => {

const mutationKey = ['sendPhoneVerificationOtpCodeMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendPhoneVerificationOtpCodeMutation>>, {data: VerifyOtpCodeToPhoneDto}> = (props) => {
          const {data} = props ?? {};

          return  sendPhoneVerificationOtpCodeMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SendPhoneVerificationOtpCodeMutationMutationResult = NonNullable<Awaited<ReturnType<typeof sendPhoneVerificationOtpCodeMutation>>>
    export type SendPhoneVerificationOtpCodeMutationMutationBody = VerifyOtpCodeToPhoneDto
    export type SendPhoneVerificationOtpCodeMutationMutationError = AxiosError<unknown>

    export const useSendPhoneVerificationOtpCodeMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendPhoneVerificationOtpCodeMutation>>, TError,{data: VerifyOtpCodeToPhoneDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof sendPhoneVerificationOtpCodeMutation>>,
        TError,
        {data: VerifyOtpCodeToPhoneDto},
        TContext
      > => {

      const mutationOptions = getSendPhoneVerificationOtpCodeMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const login = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Login200>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/auth/login`,undefined,options
    );
  }



export const getLoginMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,void, TContext> => {

const mutationKey = ['login'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, void> = () => {
          

          return  login(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
    
    export type LoginMutationError = AxiosError<unknown>

    export const useLogin = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof login>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const signupUserMutation = (
    signUpDto: SignUpDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/auth/signup`,
      signUpDto,options
    );
  }



export const getSignupUserMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signupUserMutation>>, TError,{data: SignUpDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof signupUserMutation>>, TError,{data: SignUpDto}, TContext> => {

const mutationKey = ['signupUserMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signupUserMutation>>, {data: SignUpDto}> = (props) => {
          const {data} = props ?? {};

          return  signupUserMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SignupUserMutationMutationResult = NonNullable<Awaited<ReturnType<typeof signupUserMutation>>>
    export type SignupUserMutationMutationBody = SignUpDto
    export type SignupUserMutationMutationError = AxiosError<unknown>

    export const useSignupUserMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signupUserMutation>>, TError,{data: SignUpDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof signupUserMutation>>,
        TError,
        {data: SignUpDto},
        TContext
      > => {

      const mutationOptions = getSignupUserMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createProductCategoryMutation = (
    createProductCategoryDto: CreateProductCategoryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
formData.append(`title`, createProductCategoryDto.title)
if(createProductCategoryDto.image !== undefined) {
 formData.append(`image`, createProductCategoryDto.image)
 }

    return axios.post(
      `https://ur-commerce.runflare.run/product-categories`,
      formData,options
    );
  }



export const getCreateProductCategoryMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductCategoryMutation>>, TError,{data: CreateProductCategoryDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createProductCategoryMutation>>, TError,{data: CreateProductCategoryDto}, TContext> => {

const mutationKey = ['createProductCategoryMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createProductCategoryMutation>>, {data: CreateProductCategoryDto}> = (props) => {
          const {data} = props ?? {};

          return  createProductCategoryMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProductCategoryMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createProductCategoryMutation>>>
    export type CreateProductCategoryMutationMutationBody = CreateProductCategoryDto
    export type CreateProductCategoryMutationMutationError = AxiosError<unknown>

    export const useCreateProductCategoryMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductCategoryMutation>>, TError,{data: CreateProductCategoryDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createProductCategoryMutation>>,
        TError,
        {data: CreateProductCategoryDto},
        TContext
      > => {

      const mutationOptions = getCreateProductCategoryMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findManyProductCategoriesQuery = (
    params: FindManyProductCategoriesQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FindManyProductCategoriesQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindManyProductCategoriesQueryQueryKey = (params: FindManyProductCategoriesQueryParams,) => {
    return [`https://ur-commerce.runflare.run/product-categories`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyProductCategoriesQueryQueryOptions = <TData = Awaited<ReturnType<typeof findManyProductCategoriesQuery>>, TError = AxiosError<unknown>>(params: FindManyProductCategoriesQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyProductCategoriesQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyProductCategoriesQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyProductCategoriesQuery>>> = ({ signal }) => findManyProductCategoriesQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyProductCategoriesQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindManyProductCategoriesQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findManyProductCategoriesQuery>>>
export type FindManyProductCategoriesQueryQueryError = AxiosError<unknown>



export function useFindManyProductCategoriesQuery<TData = Awaited<ReturnType<typeof findManyProductCategoriesQuery>>, TError = AxiosError<unknown>>(
 params: FindManyProductCategoriesQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyProductCategoriesQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindManyProductCategoriesQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findProductCategoryByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductCategoriesSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-categories/${id}`,options
    );
  }


export const getFindProductCategoryByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/product-categories/${id}`] as const;
    }

    
export const getFindProductCategoryByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findProductCategoryByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findProductCategoryByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindProductCategoryByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findProductCategoryByIdQuery>>> = ({ signal }) => findProductCategoryByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findProductCategoryByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindProductCategoryByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findProductCategoryByIdQuery>>>
export type FindProductCategoryByIdQueryQueryError = AxiosError<unknown>



export function useFindProductCategoryByIdQuery<TData = Awaited<ReturnType<typeof findProductCategoryByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findProductCategoryByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindProductCategoryByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateProductCategoryByIdMutation = (
    id: number,
    updateProductCategoryDto: UpdateProductCategoryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
if(updateProductCategoryDto.title !== undefined) {
 formData.append(`title`, updateProductCategoryDto.title)
 }
if(updateProductCategoryDto.image !== undefined) {
 formData.append(`image`, updateProductCategoryDto.image)
 }

    return axios.put(
      `https://ur-commerce.runflare.run/product-categories/${id}`,
      formData,options
    );
  }



export const getUpdateProductCategoryByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductCategoryByIdMutation>>, TError,{id: number;data: UpdateProductCategoryDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateProductCategoryByIdMutation>>, TError,{id: number;data: UpdateProductCategoryDto}, TContext> => {

const mutationKey = ['updateProductCategoryByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProductCategoryByIdMutation>>, {id: number;data: UpdateProductCategoryDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateProductCategoryByIdMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProductCategoryByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateProductCategoryByIdMutation>>>
    export type UpdateProductCategoryByIdMutationMutationBody = UpdateProductCategoryDto
    export type UpdateProductCategoryByIdMutationMutationError = AxiosError<unknown>

    export const useUpdateProductCategoryByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductCategoryByIdMutation>>, TError,{id: number;data: UpdateProductCategoryDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateProductCategoryByIdMutation>>,
        TError,
        {id: number;data: UpdateProductCategoryDto},
        TContext
      > => {

      const mutationOptions = getUpdateProductCategoryByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteProductCategoryByIdMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/product-categories/${id}`,options
    );
  }



export const getDeleteProductCategoryByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductCategoryByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductCategoryByIdMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteProductCategoryByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductCategoryByIdMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductCategoryByIdMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductCategoryByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductCategoryByIdMutation>>>
    
    export type DeleteProductCategoryByIdMutationMutationError = AxiosError<unknown>

    export const useDeleteProductCategoryByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductCategoryByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductCategoryByIdMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteProductCategoryByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createProductMutation = (
    createProductDto: CreateProductDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductsSerializer>> => {
    
    const formData = new FormData();
formData.append(`title`, createProductDto.title)
formData.append(`summary`, createProductDto.summary)
if(createProductDto.basePrice !== undefined) {
 formData.append(`basePrice`, createProductDto.basePrice.toString())
 }
if(createProductDto.baseDiscount !== undefined) {
 formData.append(`baseDiscount`, createProductDto.baseDiscount.toString())
 }
if(createProductDto.stockQuantity !== undefined) {
 formData.append(`stockQuantity`, createProductDto.stockQuantity.toString())
 }
if(createProductDto.category !== undefined) {
 formData.append(`category`, createProductDto.category.toString())
 }
if(createProductDto.brand !== undefined) {
 formData.append(`brand`, createProductDto.brand.toString())
 }
formData.append(`thumbnailImage`, createProductDto.thumbnailImage)
createProductDto.images.forEach(value => formData.append(`images`, value));
if(createProductDto.isWholeSale !== undefined) {
 formData.append(`isWholeSale`, createProductDto.isWholeSale.toString())
 }
if(createProductDto.isFeatured !== undefined) {
 formData.append(`isFeatured`, createProductDto.isFeatured.toString())
 }

    return axios.post(
      `https://ur-commerce.runflare.run/products`,
      formData,options
    );
  }



export const getCreateProductMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductMutation>>, TError,{data: CreateProductDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createProductMutation>>, TError,{data: CreateProductDto}, TContext> => {

const mutationKey = ['createProductMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createProductMutation>>, {data: CreateProductDto}> = (props) => {
          const {data} = props ?? {};

          return  createProductMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProductMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createProductMutation>>>
    export type CreateProductMutationMutationBody = CreateProductDto
    export type CreateProductMutationMutationError = AxiosError<unknown>

    export const useCreateProductMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductMutation>>, TError,{data: CreateProductDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createProductMutation>>,
        TError,
        {data: CreateProductDto},
        TContext
      > => {

      const mutationOptions = getCreateProductMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findManyAndCountProductsQuery = (
    params?: FindManyAndCountProductsQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FindManyAndCountProductsQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/products`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindManyAndCountProductsQueryQueryKey = (params?: FindManyAndCountProductsQueryParams,) => {
    return [`https://ur-commerce.runflare.run/products`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyAndCountProductsQueryQueryOptions = <TData = Awaited<ReturnType<typeof findManyAndCountProductsQuery>>, TError = AxiosError<unknown>>(params?: FindManyAndCountProductsQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountProductsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyAndCountProductsQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyAndCountProductsQuery>>> = ({ signal }) => findManyAndCountProductsQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountProductsQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindManyAndCountProductsQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findManyAndCountProductsQuery>>>
export type FindManyAndCountProductsQueryQueryError = AxiosError<unknown>



export function useFindManyAndCountProductsQuery<TData = Awaited<ReturnType<typeof findManyAndCountProductsQuery>>, TError = AxiosError<unknown>>(
 params?: FindManyAndCountProductsQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountProductsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindManyAndCountProductsQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findProductByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductsSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/products/${id}`,options
    );
  }


export const getFindProductByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/products/${id}`] as const;
    }

    
export const getFindProductByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findProductByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findProductByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindProductByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findProductByIdQuery>>> = ({ signal }) => findProductByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findProductByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindProductByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findProductByIdQuery>>>
export type FindProductByIdQueryQueryError = AxiosError<unknown>



export function useFindProductByIdQuery<TData = Awaited<ReturnType<typeof findProductByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findProductByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindProductByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateProductByIdMutation = (
    id: number,
    updateProductDto: UpdateProductDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
if(updateProductDto.title !== undefined) {
 formData.append(`title`, updateProductDto.title)
 }
if(updateProductDto.summary !== undefined) {
 formData.append(`summary`, updateProductDto.summary)
 }
if(updateProductDto.basePrice !== undefined) {
 formData.append(`basePrice`, updateProductDto.basePrice.toString())
 }
if(updateProductDto.baseDiscount !== undefined) {
 formData.append(`baseDiscount`, updateProductDto.baseDiscount.toString())
 }
if(updateProductDto.stockQuantity !== undefined) {
 formData.append(`stockQuantity`, updateProductDto.stockQuantity.toString())
 }
if(updateProductDto.thumbnailImage !== undefined) {
 formData.append(`thumbnailImage`, updateProductDto.thumbnailImage)
 }
if(updateProductDto.category !== undefined) {
 formData.append(`category`, updateProductDto.category.toString())
 }
if(updateProductDto.brand !== undefined) {
 formData.append(`brand`, updateProductDto.brand.toString())
 }
if(updateProductDto.isWholeSale !== undefined) {
 formData.append(`isWholeSale`, updateProductDto.isWholeSale.toString())
 }
if(updateProductDto.isFeatured !== undefined) {
 formData.append(`isFeatured`, updateProductDto.isFeatured.toString())
 }

    return axios.put(
      `https://ur-commerce.runflare.run/products/${id}`,
      formData,options
    );
  }



export const getUpdateProductByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductByIdMutation>>, TError,{id: number;data: UpdateProductDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateProductByIdMutation>>, TError,{id: number;data: UpdateProductDto}, TContext> => {

const mutationKey = ['updateProductByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProductByIdMutation>>, {id: number;data: UpdateProductDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateProductByIdMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProductByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateProductByIdMutation>>>
    export type UpdateProductByIdMutationMutationBody = UpdateProductDto
    export type UpdateProductByIdMutationMutationError = AxiosError<unknown>

    export const useUpdateProductByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductByIdMutation>>, TError,{id: number;data: UpdateProductDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateProductByIdMutation>>,
        TError,
        {id: number;data: UpdateProductDto},
        TContext
      > => {

      const mutationOptions = getUpdateProductByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteProductByIdMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/products/${id}`,options
    );
  }



export const getDeleteProductByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductByIdMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteProductByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductByIdMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductByIdMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductByIdMutation>>>
    
    export type DeleteProductByIdMutationMutationError = AxiosError<unknown>

    export const useDeleteProductByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductByIdMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteProductByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createProductBrandMutation = (
    createProductBrandDto: CreateProductBrandDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
formData.append(`title`, createProductBrandDto.title)
formData.append(`slug`, createProductBrandDto.slug)
if(createProductBrandDto.image !== undefined) {
 formData.append(`image`, createProductBrandDto.image)
 }
if(createProductBrandDto.secondImage !== undefined) {
 formData.append(`secondImage`, createProductBrandDto.secondImage)
 }
if(createProductBrandDto.categoryIds !== undefined) {
 createProductBrandDto.categoryIds.forEach(value => formData.append(`categoryIds`, value));
 }

    return axios.post(
      `https://ur-commerce.runflare.run/product-brands`,
      formData,options
    );
  }



export const getCreateProductBrandMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductBrandMutation>>, TError,{data: CreateProductBrandDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createProductBrandMutation>>, TError,{data: CreateProductBrandDto}, TContext> => {

const mutationKey = ['createProductBrandMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createProductBrandMutation>>, {data: CreateProductBrandDto}> = (props) => {
          const {data} = props ?? {};

          return  createProductBrandMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProductBrandMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createProductBrandMutation>>>
    export type CreateProductBrandMutationMutationBody = CreateProductBrandDto
    export type CreateProductBrandMutationMutationError = AxiosError<unknown>

    export const useCreateProductBrandMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductBrandMutation>>, TError,{data: CreateProductBrandDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createProductBrandMutation>>,
        TError,
        {data: CreateProductBrandDto},
        TContext
      > => {

      const mutationOptions = getCreateProductBrandMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findManyProductBrandsQuery = (
    params?: FindManyProductBrandsQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FindManyProductBrandsQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-brands`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindManyProductBrandsQueryQueryKey = (params?: FindManyProductBrandsQueryParams,) => {
    return [`https://ur-commerce.runflare.run/product-brands`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyProductBrandsQueryQueryOptions = <TData = Awaited<ReturnType<typeof findManyProductBrandsQuery>>, TError = AxiosError<unknown>>(params?: FindManyProductBrandsQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyProductBrandsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyProductBrandsQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyProductBrandsQuery>>> = ({ signal }) => findManyProductBrandsQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyProductBrandsQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindManyProductBrandsQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findManyProductBrandsQuery>>>
export type FindManyProductBrandsQueryQueryError = AxiosError<unknown>



export function useFindManyProductBrandsQuery<TData = Awaited<ReturnType<typeof findManyProductBrandsQuery>>, TError = AxiosError<unknown>>(
 params?: FindManyProductBrandsQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyProductBrandsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindManyProductBrandsQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findProductBrandByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductBrandsSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-brands/${id}`,options
    );
  }


export const getFindProductBrandByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/product-brands/${id}`] as const;
    }

    
export const getFindProductBrandByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findProductBrandByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findProductBrandByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindProductBrandByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findProductBrandByIdQuery>>> = ({ signal }) => findProductBrandByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findProductBrandByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindProductBrandByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findProductBrandByIdQuery>>>
export type FindProductBrandByIdQueryQueryError = AxiosError<unknown>



export function useFindProductBrandByIdQuery<TData = Awaited<ReturnType<typeof findProductBrandByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findProductBrandByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindProductBrandByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateProductBrandByIdMutation = (
    id: number,
    updateProductBrandDto: UpdateProductBrandDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
if(updateProductBrandDto.title !== undefined) {
 formData.append(`title`, updateProductBrandDto.title)
 }
if(updateProductBrandDto.slug !== undefined) {
 formData.append(`slug`, updateProductBrandDto.slug)
 }
if(updateProductBrandDto.image !== undefined) {
 formData.append(`image`, updateProductBrandDto.image)
 }
if(updateProductBrandDto.secondImage !== undefined) {
 formData.append(`secondImage`, updateProductBrandDto.secondImage)
 }
if(updateProductBrandDto.categoryIds !== undefined) {
 updateProductBrandDto.categoryIds.forEach(value => formData.append(`categoryIds`, value));
 }

    return axios.put(
      `https://ur-commerce.runflare.run/product-brands/${id}`,
      formData,options
    );
  }



export const getUpdateProductBrandByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductBrandByIdMutation>>, TError,{id: number;data: UpdateProductBrandDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateProductBrandByIdMutation>>, TError,{id: number;data: UpdateProductBrandDto}, TContext> => {

const mutationKey = ['updateProductBrandByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProductBrandByIdMutation>>, {id: number;data: UpdateProductBrandDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateProductBrandByIdMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProductBrandByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateProductBrandByIdMutation>>>
    export type UpdateProductBrandByIdMutationMutationBody = UpdateProductBrandDto
    export type UpdateProductBrandByIdMutationMutationError = AxiosError<unknown>

    export const useUpdateProductBrandByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductBrandByIdMutation>>, TError,{id: number;data: UpdateProductBrandDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateProductBrandByIdMutation>>,
        TError,
        {id: number;data: UpdateProductBrandDto},
        TContext
      > => {

      const mutationOptions = getUpdateProductBrandByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteProductBrandByIdMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/product-brands/${id}`,options
    );
  }



export const getDeleteProductBrandByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductBrandByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductBrandByIdMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteProductBrandByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductBrandByIdMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductBrandByIdMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductBrandByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductBrandByIdMutation>>>
    
    export type DeleteProductBrandByIdMutationMutationError = AxiosError<unknown>

    export const useDeleteProductBrandByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductBrandByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductBrandByIdMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteProductBrandByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createProductVariantMutation = (
    createProductVariantDto: CreateProductVariantDto,
    params: CreateProductVariantMutationParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/product-variants`,
      createProductVariantDto,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getCreateProductVariantMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductVariantMutation>>, TError,{data: CreateProductVariantDto;params: CreateProductVariantMutationParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createProductVariantMutation>>, TError,{data: CreateProductVariantDto;params: CreateProductVariantMutationParams}, TContext> => {

const mutationKey = ['createProductVariantMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createProductVariantMutation>>, {data: CreateProductVariantDto;params: CreateProductVariantMutationParams}> = (props) => {
          const {data,params} = props ?? {};

          return  createProductVariantMutation(data,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProductVariantMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createProductVariantMutation>>>
    export type CreateProductVariantMutationMutationBody = CreateProductVariantDto
    export type CreateProductVariantMutationMutationError = AxiosError<unknown>

    export const useCreateProductVariantMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductVariantMutation>>, TError,{data: CreateProductVariantDto;params: CreateProductVariantMutationParams}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createProductVariantMutation>>,
        TError,
        {data: CreateProductVariantDto;params: CreateProductVariantMutationParams},
        TContext
      > => {

      const mutationOptions = getCreateProductVariantMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findAllVariantsOfProductQuery = (
    productId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductVariantsSerializer[]>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-variants/all-variants-of-product/${productId}`,options
    );
  }


export const getFindAllVariantsOfProductQueryQueryKey = (productId: number,) => {
    return [`https://ur-commerce.runflare.run/product-variants/all-variants-of-product/${productId}`] as const;
    }

    
export const getFindAllVariantsOfProductQueryQueryOptions = <TData = Awaited<ReturnType<typeof findAllVariantsOfProductQuery>>, TError = AxiosError<unknown>>(productId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllVariantsOfProductQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllVariantsOfProductQueryQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllVariantsOfProductQuery>>> = ({ signal }) => findAllVariantsOfProductQuery(productId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(productId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllVariantsOfProductQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindAllVariantsOfProductQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findAllVariantsOfProductQuery>>>
export type FindAllVariantsOfProductQueryQueryError = AxiosError<unknown>



export function useFindAllVariantsOfProductQuery<TData = Awaited<ReturnType<typeof findAllVariantsOfProductQuery>>, TError = AxiosError<unknown>>(
 productId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllVariantsOfProductQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindAllVariantsOfProductQueryQueryOptions(productId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const checkProductVariantAvailabilityQuery = (
    checkProductVariantAvailabilityDto: CheckProductVariantAvailabilityDto,
    params: CheckProductVariantAvailabilityQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductVariantAvailabilitySerializer>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/product-variants/check-availability`,
      checkProductVariantAvailabilityDto,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getCheckProductVariantAvailabilityQueryMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkProductVariantAvailabilityQuery>>, TError,{data: CheckProductVariantAvailabilityDto;params: CheckProductVariantAvailabilityQueryParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof checkProductVariantAvailabilityQuery>>, TError,{data: CheckProductVariantAvailabilityDto;params: CheckProductVariantAvailabilityQueryParams}, TContext> => {

const mutationKey = ['checkProductVariantAvailabilityQuery'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof checkProductVariantAvailabilityQuery>>, {data: CheckProductVariantAvailabilityDto;params: CheckProductVariantAvailabilityQueryParams}> = (props) => {
          const {data,params} = props ?? {};

          return  checkProductVariantAvailabilityQuery(data,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CheckProductVariantAvailabilityQueryMutationResult = NonNullable<Awaited<ReturnType<typeof checkProductVariantAvailabilityQuery>>>
    export type CheckProductVariantAvailabilityQueryMutationBody = CheckProductVariantAvailabilityDto
    export type CheckProductVariantAvailabilityQueryMutationError = AxiosError<unknown>

    export const useCheckProductVariantAvailabilityQuery = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof checkProductVariantAvailabilityQuery>>, TError,{data: CheckProductVariantAvailabilityDto;params: CheckProductVariantAvailabilityQueryParams}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof checkProductVariantAvailabilityQuery>>,
        TError,
        {data: CheckProductVariantAvailabilityDto;params: CheckProductVariantAvailabilityQueryParams},
        TContext
      > => {

      const mutationOptions = getCheckProductVariantAvailabilityQueryMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getVariantPropertiesQuery = (
    params: GetVariantPropertiesQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetVariantPropertiesQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-variants/properties`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetVariantPropertiesQueryQueryKey = (params: GetVariantPropertiesQueryParams,) => {
    return [`https://ur-commerce.runflare.run/product-variants/properties`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVariantPropertiesQueryQueryOptions = <TData = Awaited<ReturnType<typeof getVariantPropertiesQuery>>, TError = AxiosError<unknown>>(params: GetVariantPropertiesQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getVariantPropertiesQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVariantPropertiesQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVariantPropertiesQuery>>> = ({ signal }) => getVariantPropertiesQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVariantPropertiesQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetVariantPropertiesQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getVariantPropertiesQuery>>>
export type GetVariantPropertiesQueryQueryError = AxiosError<unknown>



export function useGetVariantPropertiesQuery<TData = Awaited<ReturnType<typeof getVariantPropertiesQuery>>, TError = AxiosError<unknown>>(
 params: GetVariantPropertiesQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getVariantPropertiesQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetVariantPropertiesQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const productVariantsControllerFindOneById = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductVariantsSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-variants/${id}`,options
    );
  }


export const getProductVariantsControllerFindOneByIdQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/product-variants/${id}`] as const;
    }

    
export const getProductVariantsControllerFindOneByIdQueryOptions = <TData = Awaited<ReturnType<typeof productVariantsControllerFindOneById>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productVariantsControllerFindOneById>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProductVariantsControllerFindOneByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof productVariantsControllerFindOneById>>> = ({ signal }) => productVariantsControllerFindOneById(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof productVariantsControllerFindOneById>>, TError, TData> & { queryKey: QueryKey }
}

export type ProductVariantsControllerFindOneByIdQueryResult = NonNullable<Awaited<ReturnType<typeof productVariantsControllerFindOneById>>>
export type ProductVariantsControllerFindOneByIdQueryError = AxiosError<unknown>



export function useProductVariantsControllerFindOneById<TData = Awaited<ReturnType<typeof productVariantsControllerFindOneById>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof productVariantsControllerFindOneById>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getProductVariantsControllerFindOneByIdQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateProductVariantMutation = (
    id: number,
    updateProductVariantDto: UpdateProductVariantDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `https://ur-commerce.runflare.run/product-variants/${id}`,
      updateProductVariantDto,options
    );
  }



export const getUpdateProductVariantMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductVariantMutation>>, TError,{id: number;data: UpdateProductVariantDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateProductVariantMutation>>, TError,{id: number;data: UpdateProductVariantDto}, TContext> => {

const mutationKey = ['updateProductVariantMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProductVariantMutation>>, {id: number;data: UpdateProductVariantDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateProductVariantMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProductVariantMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateProductVariantMutation>>>
    export type UpdateProductVariantMutationMutationBody = UpdateProductVariantDto
    export type UpdateProductVariantMutationMutationError = AxiosError<unknown>

    export const useUpdateProductVariantMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductVariantMutation>>, TError,{id: number;data: UpdateProductVariantDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateProductVariantMutation>>,
        TError,
        {id: number;data: UpdateProductVariantDto},
        TContext
      > => {

      const mutationOptions = getUpdateProductVariantMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteProductVariantMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/product-variants/${id}`,options
    );
  }



export const getDeleteProductVariantMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductVariantMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductVariantMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteProductVariantMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductVariantMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductVariantMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductVariantMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductVariantMutation>>>
    
    export type DeleteProductVariantMutationMutationError = AxiosError<unknown>

    export const useDeleteProductVariantMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductVariantMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductVariantMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteProductVariantMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const addToMyFavoriteProductsMutation = (
    params: AddToMyFavoriteProductsMutationParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FavoriteProductsSerializer>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/favorite-products/add-to-my-favorites`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getAddToMyFavoriteProductsMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToMyFavoriteProductsMutation>>, TError,{params: AddToMyFavoriteProductsMutationParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addToMyFavoriteProductsMutation>>, TError,{params: AddToMyFavoriteProductsMutationParams}, TContext> => {

const mutationKey = ['addToMyFavoriteProductsMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addToMyFavoriteProductsMutation>>, {params: AddToMyFavoriteProductsMutationParams}> = (props) => {
          const {params} = props ?? {};

          return  addToMyFavoriteProductsMutation(params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddToMyFavoriteProductsMutationMutationResult = NonNullable<Awaited<ReturnType<typeof addToMyFavoriteProductsMutation>>>
    
    export type AddToMyFavoriteProductsMutationMutationError = AxiosError<unknown>

    export const useAddToMyFavoriteProductsMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToMyFavoriteProductsMutation>>, TError,{params: AddToMyFavoriteProductsMutationParams}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof addToMyFavoriteProductsMutation>>,
        TError,
        {params: AddToMyFavoriteProductsMutationParams},
        TContext
      > => {

      const mutationOptions = getAddToMyFavoriteProductsMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findAllMyFavoriteProducts = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FavoriteProductsSerializer[]>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/favorite-products/find-all-my-favorites`,options
    );
  }


export const getFindAllMyFavoriteProductsQueryKey = () => {
    return [`https://ur-commerce.runflare.run/favorite-products/find-all-my-favorites`] as const;
    }

    
export const getFindAllMyFavoriteProductsQueryOptions = <TData = Awaited<ReturnType<typeof findAllMyFavoriteProducts>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllMyFavoriteProducts>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllMyFavoriteProductsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllMyFavoriteProducts>>> = ({ signal }) => findAllMyFavoriteProducts({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllMyFavoriteProducts>>, TError, TData> & { queryKey: QueryKey }
}

export type FindAllMyFavoriteProductsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllMyFavoriteProducts>>>
export type FindAllMyFavoriteProductsQueryError = AxiosError<unknown>



export function useFindAllMyFavoriteProducts<TData = Awaited<ReturnType<typeof findAllMyFavoriteProducts>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllMyFavoriteProducts>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindAllMyFavoriteProductsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const checkIsMyFavoriteQuery = (
    productId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FavoriteProductsSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/favorite-products/check-is-my-favorite/${productId}`,options
    );
  }


export const getCheckIsMyFavoriteQueryQueryKey = (productId: number,) => {
    return [`https://ur-commerce.runflare.run/favorite-products/check-is-my-favorite/${productId}`] as const;
    }

    
export const getCheckIsMyFavoriteQueryQueryOptions = <TData = Awaited<ReturnType<typeof checkIsMyFavoriteQuery>>, TError = AxiosError<unknown>>(productId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof checkIsMyFavoriteQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCheckIsMyFavoriteQueryQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof checkIsMyFavoriteQuery>>> = ({ signal }) => checkIsMyFavoriteQuery(productId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(productId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof checkIsMyFavoriteQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type CheckIsMyFavoriteQueryQueryResult = NonNullable<Awaited<ReturnType<typeof checkIsMyFavoriteQuery>>>
export type CheckIsMyFavoriteQueryQueryError = AxiosError<unknown>



export function useCheckIsMyFavoriteQuery<TData = Awaited<ReturnType<typeof checkIsMyFavoriteQuery>>, TError = AxiosError<unknown>>(
 productId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof checkIsMyFavoriteQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getCheckIsMyFavoriteQueryQueryOptions(productId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteMyFavoriteProductMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/favorite-products/my-favorites/${id}`,options
    );
  }



export const getDeleteMyFavoriteProductMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMyFavoriteProductMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMyFavoriteProductMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteMyFavoriteProductMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMyFavoriteProductMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMyFavoriteProductMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMyFavoriteProductMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMyFavoriteProductMutation>>>
    
    export type DeleteMyFavoriteProductMutationMutationError = AxiosError<unknown>

    export const useDeleteMyFavoriteProductMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMyFavoriteProductMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteMyFavoriteProductMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMyFavoriteProductMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createProductCommentMutation = (
    createProductCommentDto: CreateProductCommentDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductCommentsSerializer>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/product-comments`,
      createProductCommentDto,options
    );
  }



export const getCreateProductCommentMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductCommentMutation>>, TError,{data: CreateProductCommentDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createProductCommentMutation>>, TError,{data: CreateProductCommentDto}, TContext> => {

const mutationKey = ['createProductCommentMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createProductCommentMutation>>, {data: CreateProductCommentDto}> = (props) => {
          const {data} = props ?? {};

          return  createProductCommentMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProductCommentMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createProductCommentMutation>>>
    export type CreateProductCommentMutationMutationBody = CreateProductCommentDto
    export type CreateProductCommentMutationMutationError = AxiosError<unknown>

    export const useCreateProductCommentMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductCommentMutation>>, TError,{data: CreateProductCommentDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createProductCommentMutation>>,
        TError,
        {data: CreateProductCommentDto},
        TContext
      > => {

      const mutationOptions = getCreateProductCommentMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const updateMyCommentMutation = (
    id: number,
    updateProductCommentDto: UpdateProductCommentDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductCommentsSerializer>> => {
    
    
    return axios.put(
      `https://ur-commerce.runflare.run/product-comments/my-comments/${id}`,
      updateProductCommentDto,options
    );
  }



export const getUpdateMyCommentMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMyCommentMutation>>, TError,{id: number;data: UpdateProductCommentDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateMyCommentMutation>>, TError,{id: number;data: UpdateProductCommentDto}, TContext> => {

const mutationKey = ['updateMyCommentMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMyCommentMutation>>, {id: number;data: UpdateProductCommentDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateMyCommentMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMyCommentMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateMyCommentMutation>>>
    export type UpdateMyCommentMutationMutationBody = UpdateProductCommentDto
    export type UpdateMyCommentMutationMutationError = AxiosError<unknown>

    export const useUpdateMyCommentMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMyCommentMutation>>, TError,{id: number;data: UpdateProductCommentDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateMyCommentMutation>>,
        TError,
        {id: number;data: UpdateProductCommentDto},
        TContext
      > => {

      const mutationOptions = getUpdateMyCommentMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteMyCommentMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/product-comments/my-comments/${id}`,options
    );
  }



export const getDeleteMyCommentMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMyCommentMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMyCommentMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteMyCommentMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMyCommentMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMyCommentMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMyCommentMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMyCommentMutation>>>
    
    export type DeleteMyCommentMutationMutationError = AxiosError<unknown>

    export const useDeleteMyCommentMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMyCommentMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteMyCommentMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteMyCommentMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findMyCommentsQuery = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductCommentsSerializer[]>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-comments/my-comments`,options
    );
  }


export const getFindMyCommentsQueryQueryKey = () => {
    return [`https://ur-commerce.runflare.run/product-comments/my-comments`] as const;
    }

    
export const getFindMyCommentsQueryQueryOptions = <TData = Awaited<ReturnType<typeof findMyCommentsQuery>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findMyCommentsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindMyCommentsQueryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findMyCommentsQuery>>> = ({ signal }) => findMyCommentsQuery({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findMyCommentsQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindMyCommentsQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findMyCommentsQuery>>>
export type FindMyCommentsQueryQueryError = AxiosError<unknown>



export function useFindMyCommentsQuery<TData = Awaited<ReturnType<typeof findMyCommentsQuery>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findMyCommentsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindMyCommentsQueryQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findMyCommentsByProductQuery = (
    productId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductCommentsSerializer[]>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-comments/my-comments/product/${productId}`,options
    );
  }


export const getFindMyCommentsByProductQueryQueryKey = (productId: number,) => {
    return [`https://ur-commerce.runflare.run/product-comments/my-comments/product/${productId}`] as const;
    }

    
export const getFindMyCommentsByProductQueryQueryOptions = <TData = Awaited<ReturnType<typeof findMyCommentsByProductQuery>>, TError = AxiosError<unknown>>(productId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findMyCommentsByProductQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindMyCommentsByProductQueryQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findMyCommentsByProductQuery>>> = ({ signal }) => findMyCommentsByProductQuery(productId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(productId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findMyCommentsByProductQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindMyCommentsByProductQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findMyCommentsByProductQuery>>>
export type FindMyCommentsByProductQueryQueryError = AxiosError<unknown>



export function useFindMyCommentsByProductQuery<TData = Awaited<ReturnType<typeof findMyCommentsByProductQuery>>, TError = AxiosError<unknown>>(
 productId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findMyCommentsByProductQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindMyCommentsByProductQueryQueryOptions(productId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findAcceptedCommentsByProductQuery = (
    productId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductCommentsSerializer[]>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-comments/product/${productId}/accepted`,options
    );
  }


export const getFindAcceptedCommentsByProductQueryQueryKey = (productId: number,) => {
    return [`https://ur-commerce.runflare.run/product-comments/product/${productId}/accepted`] as const;
    }

    
export const getFindAcceptedCommentsByProductQueryQueryOptions = <TData = Awaited<ReturnType<typeof findAcceptedCommentsByProductQuery>>, TError = AxiosError<unknown>>(productId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAcceptedCommentsByProductQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAcceptedCommentsByProductQueryQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAcceptedCommentsByProductQuery>>> = ({ signal }) => findAcceptedCommentsByProductQuery(productId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(productId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAcceptedCommentsByProductQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindAcceptedCommentsByProductQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findAcceptedCommentsByProductQuery>>>
export type FindAcceptedCommentsByProductQueryQueryError = AxiosError<unknown>



export function useFindAcceptedCommentsByProductQuery<TData = Awaited<ReturnType<typeof findAcceptedCommentsByProductQuery>>, TError = AxiosError<unknown>>(
 productId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAcceptedCommentsByProductQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindAcceptedCommentsByProductQueryQueryOptions(productId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findAllCommentsQuery = (
    params?: FindAllCommentsQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductCommentsSerializer[]>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-comments/admin/all`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindAllCommentsQueryQueryKey = (params?: FindAllCommentsQueryParams,) => {
    return [`https://ur-commerce.runflare.run/product-comments/admin/all`, ...(params ? [params]: [])] as const;
    }

    
export const getFindAllCommentsQueryQueryOptions = <TData = Awaited<ReturnType<typeof findAllCommentsQuery>>, TError = AxiosError<unknown>>(params?: FindAllCommentsQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllCommentsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllCommentsQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllCommentsQuery>>> = ({ signal }) => findAllCommentsQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllCommentsQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindAllCommentsQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findAllCommentsQuery>>>
export type FindAllCommentsQueryQueryError = AxiosError<unknown>



export function useFindAllCommentsQuery<TData = Awaited<ReturnType<typeof findAllCommentsQuery>>, TError = AxiosError<unknown>>(
 params?: FindAllCommentsQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findAllCommentsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindAllCommentsQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateCommentStatusMutation = (
    id: number,
    adminUpdateCommentStatusDto: AdminUpdateCommentStatusDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductCommentsSerializer>> => {
    
    
    return axios.put(
      `https://ur-commerce.runflare.run/product-comments/admin/${id}/status`,
      adminUpdateCommentStatusDto,options
    );
  }



export const getUpdateCommentStatusMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCommentStatusMutation>>, TError,{id: number;data: AdminUpdateCommentStatusDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateCommentStatusMutation>>, TError,{id: number;data: AdminUpdateCommentStatusDto}, TContext> => {

const mutationKey = ['updateCommentStatusMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCommentStatusMutation>>, {id: number;data: AdminUpdateCommentStatusDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCommentStatusMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCommentStatusMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateCommentStatusMutation>>>
    export type UpdateCommentStatusMutationMutationBody = AdminUpdateCommentStatusDto
    export type UpdateCommentStatusMutationMutationError = AxiosError<unknown>

    export const useUpdateCommentStatusMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCommentStatusMutation>>, TError,{id: number;data: AdminUpdateCommentStatusDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateCommentStatusMutation>>,
        TError,
        {id: number;data: AdminUpdateCommentStatusDto},
        TContext
      > => {

      const mutationOptions = getUpdateCommentStatusMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteCommentMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/product-comments/admin/${id}`,options
    );
  }



export const getDeleteCommentMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCommentMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCommentMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteCommentMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCommentMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteCommentMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCommentMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCommentMutation>>>
    
    export type DeleteCommentMutationMutationError = AxiosError<unknown>

    export const useDeleteCommentMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCommentMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteCommentMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteCommentMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findCommentByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductCommentsSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-comments/admin/${id}`,options
    );
  }


export const getFindCommentByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/product-comments/admin/${id}`] as const;
    }

    
export const getFindCommentByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findCommentByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findCommentByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindCommentByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findCommentByIdQuery>>> = ({ signal }) => findCommentByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findCommentByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindCommentByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findCommentByIdQuery>>>
export type FindCommentByIdQueryQueryError = AxiosError<unknown>



export function useFindCommentByIdQuery<TData = Awaited<ReturnType<typeof findCommentByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findCommentByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindCommentByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getMyShoppingCartQuery = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ShoppingCartsSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/shopping-carts/my-cart`,options
    );
  }


export const getGetMyShoppingCartQueryQueryKey = () => {
    return [`https://ur-commerce.runflare.run/shopping-carts/my-cart`] as const;
    }

    
export const getGetMyShoppingCartQueryQueryOptions = <TData = Awaited<ReturnType<typeof getMyShoppingCartQuery>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyShoppingCartQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyShoppingCartQueryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyShoppingCartQuery>>> = ({ signal }) => getMyShoppingCartQuery({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyShoppingCartQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMyShoppingCartQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getMyShoppingCartQuery>>>
export type GetMyShoppingCartQueryQueryError = AxiosError<unknown>



export function useGetMyShoppingCartQuery<TData = Awaited<ReturnType<typeof getMyShoppingCartQuery>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyShoppingCartQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMyShoppingCartQueryQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getCartSummaryQuery = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetCartSummaryQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/shopping-carts/cart-summary`,options
    );
  }


export const getGetCartSummaryQueryQueryKey = () => {
    return [`https://ur-commerce.runflare.run/shopping-carts/cart-summary`] as const;
    }

    
export const getGetCartSummaryQueryQueryOptions = <TData = Awaited<ReturnType<typeof getCartSummaryQuery>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCartSummaryQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCartSummaryQueryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCartSummaryQuery>>> = ({ signal }) => getCartSummaryQuery({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCartSummaryQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCartSummaryQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getCartSummaryQuery>>>
export type GetCartSummaryQueryQueryError = AxiosError<unknown>



export function useGetCartSummaryQuery<TData = Awaited<ReturnType<typeof getCartSummaryQuery>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCartSummaryQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetCartSummaryQueryQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const clearShoppingCartMutation = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/shopping-carts/clear`,options
    );
  }



export const getClearShoppingCartMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearShoppingCartMutation>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof clearShoppingCartMutation>>, TError,void, TContext> => {

const mutationKey = ['clearShoppingCartMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof clearShoppingCartMutation>>, void> = () => {
          

          return  clearShoppingCartMutation(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ClearShoppingCartMutationMutationResult = NonNullable<Awaited<ReturnType<typeof clearShoppingCartMutation>>>
    
    export type ClearShoppingCartMutationMutationError = AxiosError<unknown>

    export const useClearShoppingCartMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearShoppingCartMutation>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof clearShoppingCartMutation>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getClearShoppingCartMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const addToCartMutation = (
    createShoppingCartItemDto: CreateShoppingCartItemDto,
    params: AddToCartMutationParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/shopping-cart-items/add-to-cart`,
      createShoppingCartItemDto,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getAddToCartMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToCartMutation>>, TError,{data: CreateShoppingCartItemDto;params: AddToCartMutationParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addToCartMutation>>, TError,{data: CreateShoppingCartItemDto;params: AddToCartMutationParams}, TContext> => {

const mutationKey = ['addToCartMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addToCartMutation>>, {data: CreateShoppingCartItemDto;params: AddToCartMutationParams}> = (props) => {
          const {data,params} = props ?? {};

          return  addToCartMutation(data,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddToCartMutationMutationResult = NonNullable<Awaited<ReturnType<typeof addToCartMutation>>>
    export type AddToCartMutationMutationBody = CreateShoppingCartItemDto
    export type AddToCartMutationMutationError = AxiosError<unknown>

    export const useAddToCartMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToCartMutation>>, TError,{data: CreateShoppingCartItemDto;params: AddToCartMutationParams}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof addToCartMutation>>,
        TError,
        {data: CreateShoppingCartItemDto;params: AddToCartMutationParams},
        TContext
      > => {

      const mutationOptions = getAddToCartMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getMyCartItemsQuery = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ShoppingCartItemsSerializer[]>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/shopping-cart-items/my-items`,options
    );
  }


export const getGetMyCartItemsQueryQueryKey = () => {
    return [`https://ur-commerce.runflare.run/shopping-cart-items/my-items`] as const;
    }

    
export const getGetMyCartItemsQueryQueryOptions = <TData = Awaited<ReturnType<typeof getMyCartItemsQuery>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyCartItemsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyCartItemsQueryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyCartItemsQuery>>> = ({ signal }) => getMyCartItemsQuery({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyCartItemsQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMyCartItemsQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getMyCartItemsQuery>>>
export type GetMyCartItemsQueryQueryError = AxiosError<unknown>



export function useGetMyCartItemsQuery<TData = Awaited<ReturnType<typeof getMyCartItemsQuery>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyCartItemsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMyCartItemsQueryQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateCartItemMutation = (
    id: number,
    updateShoppingCartItemDto: UpdateShoppingCartItemDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `https://ur-commerce.runflare.run/shopping-cart-items/${id}`,
      updateShoppingCartItemDto,options
    );
  }



export const getUpdateCartItemMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCartItemMutation>>, TError,{id: number;data: UpdateShoppingCartItemDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateCartItemMutation>>, TError,{id: number;data: UpdateShoppingCartItemDto}, TContext> => {

const mutationKey = ['updateCartItemMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCartItemMutation>>, {id: number;data: UpdateShoppingCartItemDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCartItemMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCartItemMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateCartItemMutation>>>
    export type UpdateCartItemMutationMutationBody = UpdateShoppingCartItemDto
    export type UpdateCartItemMutationMutationError = AxiosError<unknown>

    export const useUpdateCartItemMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCartItemMutation>>, TError,{id: number;data: UpdateShoppingCartItemDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateCartItemMutation>>,
        TError,
        {id: number;data: UpdateShoppingCartItemDto},
        TContext
      > => {

      const mutationOptions = getUpdateCartItemMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const removeFromCartMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/shopping-cart-items/${id}`,options
    );
  }



export const getRemoveFromCartMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeFromCartMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof removeFromCartMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['removeFromCartMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeFromCartMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  removeFromCartMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveFromCartMutationMutationResult = NonNullable<Awaited<ReturnType<typeof removeFromCartMutation>>>
    
    export type RemoveFromCartMutationMutationError = AxiosError<unknown>

    export const useRemoveFromCartMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeFromCartMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof removeFromCartMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getRemoveFromCartMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createWeblogCategoryMutation = (
    createWeblogCategoryDto: CreateWeblogCategoryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/weblog-categories`,
      createWeblogCategoryDto,options
    );
  }



export const getCreateWeblogCategoryMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWeblogCategoryMutation>>, TError,{data: CreateWeblogCategoryDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createWeblogCategoryMutation>>, TError,{data: CreateWeblogCategoryDto}, TContext> => {

const mutationKey = ['createWeblogCategoryMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createWeblogCategoryMutation>>, {data: CreateWeblogCategoryDto}> = (props) => {
          const {data} = props ?? {};

          return  createWeblogCategoryMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateWeblogCategoryMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createWeblogCategoryMutation>>>
    export type CreateWeblogCategoryMutationMutationBody = CreateWeblogCategoryDto
    export type CreateWeblogCategoryMutationMutationError = AxiosError<unknown>

    export const useCreateWeblogCategoryMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWeblogCategoryMutation>>, TError,{data: CreateWeblogCategoryDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createWeblogCategoryMutation>>,
        TError,
        {data: CreateWeblogCategoryDto},
        TContext
      > => {

      const mutationOptions = getCreateWeblogCategoryMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findManyAndCountWeblogCategoriesQuery = (
    params?: FindManyAndCountWeblogCategoriesQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FindManyAndCountWeblogCategoriesQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/weblog-categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindManyAndCountWeblogCategoriesQueryQueryKey = (params?: FindManyAndCountWeblogCategoriesQueryParams,) => {
    return [`https://ur-commerce.runflare.run/weblog-categories`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyAndCountWeblogCategoriesQueryQueryOptions = <TData = Awaited<ReturnType<typeof findManyAndCountWeblogCategoriesQuery>>, TError = AxiosError<unknown>>(params?: FindManyAndCountWeblogCategoriesQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountWeblogCategoriesQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyAndCountWeblogCategoriesQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyAndCountWeblogCategoriesQuery>>> = ({ signal }) => findManyAndCountWeblogCategoriesQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountWeblogCategoriesQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindManyAndCountWeblogCategoriesQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findManyAndCountWeblogCategoriesQuery>>>
export type FindManyAndCountWeblogCategoriesQueryQueryError = AxiosError<unknown>



export function useFindManyAndCountWeblogCategoriesQuery<TData = Awaited<ReturnType<typeof findManyAndCountWeblogCategoriesQuery>>, TError = AxiosError<unknown>>(
 params?: FindManyAndCountWeblogCategoriesQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountWeblogCategoriesQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindManyAndCountWeblogCategoriesQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findWeblogCategoryByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WeblogCategorySerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/weblog-categories/${id}`,options
    );
  }


export const getFindWeblogCategoryByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/weblog-categories/${id}`] as const;
    }

    
export const getFindWeblogCategoryByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findWeblogCategoryByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findWeblogCategoryByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindWeblogCategoryByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findWeblogCategoryByIdQuery>>> = ({ signal }) => findWeblogCategoryByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findWeblogCategoryByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindWeblogCategoryByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findWeblogCategoryByIdQuery>>>
export type FindWeblogCategoryByIdQueryQueryError = AxiosError<unknown>



export function useFindWeblogCategoryByIdQuery<TData = Awaited<ReturnType<typeof findWeblogCategoryByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findWeblogCategoryByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindWeblogCategoryByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateWeblogCategoryByIdMutation = (
    id: number,
    updateWeblogCategoryDto: UpdateWeblogCategoryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `https://ur-commerce.runflare.run/weblog-categories/${id}`,
      updateWeblogCategoryDto,options
    );
  }



export const getUpdateWeblogCategoryByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateWeblogCategoryByIdMutation>>, TError,{id: number;data: UpdateWeblogCategoryDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateWeblogCategoryByIdMutation>>, TError,{id: number;data: UpdateWeblogCategoryDto}, TContext> => {

const mutationKey = ['updateWeblogCategoryByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateWeblogCategoryByIdMutation>>, {id: number;data: UpdateWeblogCategoryDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateWeblogCategoryByIdMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateWeblogCategoryByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateWeblogCategoryByIdMutation>>>
    export type UpdateWeblogCategoryByIdMutationMutationBody = UpdateWeblogCategoryDto
    export type UpdateWeblogCategoryByIdMutationMutationError = AxiosError<unknown>

    export const useUpdateWeblogCategoryByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateWeblogCategoryByIdMutation>>, TError,{id: number;data: UpdateWeblogCategoryDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateWeblogCategoryByIdMutation>>,
        TError,
        {id: number;data: UpdateWeblogCategoryDto},
        TContext
      > => {

      const mutationOptions = getUpdateWeblogCategoryByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteWeblogCategoryByIdMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/weblog-categories/${id}`,options
    );
  }



export const getDeleteWeblogCategoryByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWeblogCategoryByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteWeblogCategoryByIdMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteWeblogCategoryByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWeblogCategoryByIdMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteWeblogCategoryByIdMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWeblogCategoryByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWeblogCategoryByIdMutation>>>
    
    export type DeleteWeblogCategoryByIdMutationMutationError = AxiosError<unknown>

    export const useDeleteWeblogCategoryByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWeblogCategoryByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteWeblogCategoryByIdMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteWeblogCategoryByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createWeblogArticleMutation = (
    createWeblogArticleDto: CreateWeblogArticleDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
formData.append(`title`, createWeblogArticleDto.title)
formData.append(`summary`, createWeblogArticleDto.summary)
formData.append(`content`, createWeblogArticleDto.content)
if(createWeblogArticleDto.slug !== undefined) {
 formData.append(`slug`, createWeblogArticleDto.slug)
 }
createWeblogArticleDto.tags.forEach(value => formData.append(`tags`, value));
if(createWeblogArticleDto.category !== undefined) {
 formData.append(`category`, createWeblogArticleDto.category.toString())
 }
if(createWeblogArticleDto.thumbnailImage !== undefined) {
 formData.append(`thumbnailImage`, createWeblogArticleDto.thumbnailImage)
 }

    return axios.post(
      `https://ur-commerce.runflare.run/weblog-articles`,
      formData,options
    );
  }



export const getCreateWeblogArticleMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWeblogArticleMutation>>, TError,{data: CreateWeblogArticleDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createWeblogArticleMutation>>, TError,{data: CreateWeblogArticleDto}, TContext> => {

const mutationKey = ['createWeblogArticleMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createWeblogArticleMutation>>, {data: CreateWeblogArticleDto}> = (props) => {
          const {data} = props ?? {};

          return  createWeblogArticleMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateWeblogArticleMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createWeblogArticleMutation>>>
    export type CreateWeblogArticleMutationMutationBody = CreateWeblogArticleDto
    export type CreateWeblogArticleMutationMutationError = AxiosError<unknown>

    export const useCreateWeblogArticleMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWeblogArticleMutation>>, TError,{data: CreateWeblogArticleDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createWeblogArticleMutation>>,
        TError,
        {data: CreateWeblogArticleDto},
        TContext
      > => {

      const mutationOptions = getCreateWeblogArticleMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findManyAndCountWeblogArticlesQuery = (
    params?: FindManyAndCountWeblogArticlesQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FindManyAndCountWeblogArticlesQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/weblog-articles`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindManyAndCountWeblogArticlesQueryQueryKey = (params?: FindManyAndCountWeblogArticlesQueryParams,) => {
    return [`https://ur-commerce.runflare.run/weblog-articles`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyAndCountWeblogArticlesQueryQueryOptions = <TData = Awaited<ReturnType<typeof findManyAndCountWeblogArticlesQuery>>, TError = AxiosError<unknown>>(params?: FindManyAndCountWeblogArticlesQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountWeblogArticlesQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyAndCountWeblogArticlesQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyAndCountWeblogArticlesQuery>>> = ({ signal }) => findManyAndCountWeblogArticlesQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountWeblogArticlesQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindManyAndCountWeblogArticlesQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findManyAndCountWeblogArticlesQuery>>>
export type FindManyAndCountWeblogArticlesQueryQueryError = AxiosError<unknown>



export function useFindManyAndCountWeblogArticlesQuery<TData = Awaited<ReturnType<typeof findManyAndCountWeblogArticlesQuery>>, TError = AxiosError<unknown>>(
 params?: FindManyAndCountWeblogArticlesQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountWeblogArticlesQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindManyAndCountWeblogArticlesQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findWeblogArticleBySlugQuery = (
    slug: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WeblogArticleSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/weblog-articles/by-slug/${slug}`,options
    );
  }


export const getFindWeblogArticleBySlugQueryQueryKey = (slug: string,) => {
    return [`https://ur-commerce.runflare.run/weblog-articles/by-slug/${slug}`] as const;
    }

    
export const getFindWeblogArticleBySlugQueryQueryOptions = <TData = Awaited<ReturnType<typeof findWeblogArticleBySlugQuery>>, TError = AxiosError<unknown>>(slug: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findWeblogArticleBySlugQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindWeblogArticleBySlugQueryQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findWeblogArticleBySlugQuery>>> = ({ signal }) => findWeblogArticleBySlugQuery(slug, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(slug), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findWeblogArticleBySlugQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindWeblogArticleBySlugQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findWeblogArticleBySlugQuery>>>
export type FindWeblogArticleBySlugQueryQueryError = AxiosError<unknown>



export function useFindWeblogArticleBySlugQuery<TData = Awaited<ReturnType<typeof findWeblogArticleBySlugQuery>>, TError = AxiosError<unknown>>(
 slug: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findWeblogArticleBySlugQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindWeblogArticleBySlugQueryQueryOptions(slug,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findWeblogArticleByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WeblogArticleSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/weblog-articles/${id}`,options
    );
  }


export const getFindWeblogArticleByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/weblog-articles/${id}`] as const;
    }

    
export const getFindWeblogArticleByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findWeblogArticleByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findWeblogArticleByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindWeblogArticleByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findWeblogArticleByIdQuery>>> = ({ signal }) => findWeblogArticleByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findWeblogArticleByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindWeblogArticleByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findWeblogArticleByIdQuery>>>
export type FindWeblogArticleByIdQueryQueryError = AxiosError<unknown>



export function useFindWeblogArticleByIdQuery<TData = Awaited<ReturnType<typeof findWeblogArticleByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findWeblogArticleByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindWeblogArticleByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateWeblogArticleByIdMutation = (
    id: number,
    updateWeblogArticleDto: UpdateWeblogArticleDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
if(updateWeblogArticleDto.title !== undefined) {
 formData.append(`title`, updateWeblogArticleDto.title)
 }
if(updateWeblogArticleDto.summary !== undefined) {
 formData.append(`summary`, updateWeblogArticleDto.summary)
 }
if(updateWeblogArticleDto.content !== undefined) {
 formData.append(`content`, updateWeblogArticleDto.content)
 }
if(updateWeblogArticleDto.slug !== undefined) {
 formData.append(`slug`, updateWeblogArticleDto.slug)
 }
if(updateWeblogArticleDto.tags !== undefined) {
 updateWeblogArticleDto.tags.forEach(value => formData.append(`tags`, value));
 }
if(updateWeblogArticleDto.category !== undefined) {
 formData.append(`category`, updateWeblogArticleDto.category.toString())
 }
if(updateWeblogArticleDto.thumbnailImage !== undefined) {
 formData.append(`thumbnailImage`, updateWeblogArticleDto.thumbnailImage)
 }

    return axios.put(
      `https://ur-commerce.runflare.run/weblog-articles/${id}`,
      formData,options
    );
  }



export const getUpdateWeblogArticleByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateWeblogArticleByIdMutation>>, TError,{id: number;data: UpdateWeblogArticleDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateWeblogArticleByIdMutation>>, TError,{id: number;data: UpdateWeblogArticleDto}, TContext> => {

const mutationKey = ['updateWeblogArticleByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateWeblogArticleByIdMutation>>, {id: number;data: UpdateWeblogArticleDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateWeblogArticleByIdMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateWeblogArticleByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateWeblogArticleByIdMutation>>>
    export type UpdateWeblogArticleByIdMutationMutationBody = UpdateWeblogArticleDto
    export type UpdateWeblogArticleByIdMutationMutationError = AxiosError<unknown>

    export const useUpdateWeblogArticleByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateWeblogArticleByIdMutation>>, TError,{id: number;data: UpdateWeblogArticleDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateWeblogArticleByIdMutation>>,
        TError,
        {id: number;data: UpdateWeblogArticleDto},
        TContext
      > => {

      const mutationOptions = getUpdateWeblogArticleByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteWeblogArticleByIdMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/weblog-articles/${id}`,options
    );
  }



export const getDeleteWeblogArticleByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWeblogArticleByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteWeblogArticleByIdMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteWeblogArticleByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWeblogArticleByIdMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteWeblogArticleByIdMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWeblogArticleByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWeblogArticleByIdMutation>>>
    
    export type DeleteWeblogArticleByIdMutationMutationError = AxiosError<unknown>

    export const useDeleteWeblogArticleByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWeblogArticleByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteWeblogArticleByIdMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteWeblogArticleByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createOrderFromCartMutation = (
    createOrderDto: CreateOrderDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OrdersSerializer>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/orders/create-from-cart`,
      createOrderDto,options
    );
  }



export const getCreateOrderFromCartMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrderFromCartMutation>>, TError,{data: CreateOrderDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createOrderFromCartMutation>>, TError,{data: CreateOrderDto}, TContext> => {

const mutationKey = ['createOrderFromCartMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrderFromCartMutation>>, {data: CreateOrderDto}> = (props) => {
          const {data} = props ?? {};

          return  createOrderFromCartMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrderFromCartMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createOrderFromCartMutation>>>
    export type CreateOrderFromCartMutationMutationBody = CreateOrderDto
    export type CreateOrderFromCartMutationMutationError = AxiosError<unknown>

    export const useCreateOrderFromCartMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrderFromCartMutation>>, TError,{data: CreateOrderDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createOrderFromCartMutation>>,
        TError,
        {data: CreateOrderDto},
        TContext
      > => {

      const mutationOptions = getCreateOrderFromCartMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getMyOrderStatsQuery = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetMyOrderStatsQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/orders/my-stats`,options
    );
  }


export const getGetMyOrderStatsQueryQueryKey = () => {
    return [`https://ur-commerce.runflare.run/orders/my-stats`] as const;
    }

    
export const getGetMyOrderStatsQueryQueryOptions = <TData = Awaited<ReturnType<typeof getMyOrderStatsQuery>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyOrderStatsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyOrderStatsQueryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyOrderStatsQuery>>> = ({ signal }) => getMyOrderStatsQuery({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyOrderStatsQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMyOrderStatsQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getMyOrderStatsQuery>>>
export type GetMyOrderStatsQueryQueryError = AxiosError<unknown>



export function useGetMyOrderStatsQuery<TData = Awaited<ReturnType<typeof getMyOrderStatsQuery>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyOrderStatsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMyOrderStatsQueryQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getMyOrdersQuery = (
    params: GetMyOrdersQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetMyOrdersQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/orders/my-orders`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetMyOrdersQueryQueryKey = (params: GetMyOrdersQueryParams,) => {
    return [`https://ur-commerce.runflare.run/orders/my-orders`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMyOrdersQueryQueryOptions = <TData = Awaited<ReturnType<typeof getMyOrdersQuery>>, TError = AxiosError<unknown>>(params: GetMyOrdersQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyOrdersQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyOrdersQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyOrdersQuery>>> = ({ signal }) => getMyOrdersQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyOrdersQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMyOrdersQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getMyOrdersQuery>>>
export type GetMyOrdersQueryQueryError = AxiosError<unknown>



export function useGetMyOrdersQuery<TData = Awaited<ReturnType<typeof getMyOrdersQuery>>, TError = AxiosError<unknown>>(
 params: GetMyOrdersQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyOrdersQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMyOrdersQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getOrderWithItemsByIdQuery = (
    orderId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OrdersSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/orders/find-order-with-items/${orderId}`,options
    );
  }


export const getGetOrderWithItemsByIdQueryQueryKey = (orderId: number,) => {
    return [`https://ur-commerce.runflare.run/orders/find-order-with-items/${orderId}`] as const;
    }

    
export const getGetOrderWithItemsByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof getOrderWithItemsByIdQuery>>, TError = AxiosError<unknown>>(orderId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOrderWithItemsByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderWithItemsByIdQueryQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderWithItemsByIdQuery>>> = ({ signal }) => getOrderWithItemsByIdQuery(orderId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderWithItemsByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetOrderWithItemsByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderWithItemsByIdQuery>>>
export type GetOrderWithItemsByIdQueryQueryError = AxiosError<unknown>



export function useGetOrderWithItemsByIdQuery<TData = Awaited<ReturnType<typeof getOrderWithItemsByIdQuery>>, TError = AxiosError<unknown>>(
 orderId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOrderWithItemsByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetOrderWithItemsByIdQueryQueryOptions(orderId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getAllOrdersQuery = (
    params: GetAllOrdersQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAllOrdersQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/orders/all`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAllOrdersQueryQueryKey = (params: GetAllOrdersQueryParams,) => {
    return [`https://ur-commerce.runflare.run/orders/all`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllOrdersQueryQueryOptions = <TData = Awaited<ReturnType<typeof getAllOrdersQuery>>, TError = AxiosError<unknown>>(params: GetAllOrdersQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAllOrdersQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllOrdersQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllOrdersQuery>>> = ({ signal }) => getAllOrdersQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllOrdersQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllOrdersQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getAllOrdersQuery>>>
export type GetAllOrdersQueryQueryError = AxiosError<unknown>



export function useGetAllOrdersQuery<TData = Awaited<ReturnType<typeof getAllOrdersQuery>>, TError = AxiosError<unknown>>(
 params: GetAllOrdersQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAllOrdersQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetAllOrdersQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getOrderByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OrdersSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/orders/${id}`,options
    );
  }


export const getGetOrderByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/orders/${id}`] as const;
    }

    
export const getGetOrderByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof getOrderByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOrderByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderByIdQuery>>> = ({ signal }) => getOrderByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetOrderByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderByIdQuery>>>
export type GetOrderByIdQueryQueryError = AxiosError<unknown>



export function useGetOrderByIdQuery<TData = Awaited<ReturnType<typeof getOrderByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOrderByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetOrderByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateOrderStatusMutation = (
    id: number,
    updateOrderStatusDto: UpdateOrderStatusDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `https://ur-commerce.runflare.run/orders/${id}/status`,
      updateOrderStatusDto,options
    );
  }



export const getUpdateOrderStatusMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrderStatusMutation>>, TError,{id: number;data: UpdateOrderStatusDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateOrderStatusMutation>>, TError,{id: number;data: UpdateOrderStatusDto}, TContext> => {

const mutationKey = ['updateOrderStatusMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOrderStatusMutation>>, {id: number;data: UpdateOrderStatusDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateOrderStatusMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOrderStatusMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrderStatusMutation>>>
    export type UpdateOrderStatusMutationMutationBody = UpdateOrderStatusDto
    export type UpdateOrderStatusMutationMutationError = AxiosError<unknown>

    export const useUpdateOrderStatusMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrderStatusMutation>>, TError,{id: number;data: UpdateOrderStatusDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateOrderStatusMutation>>,
        TError,
        {id: number;data: UpdateOrderStatusDto},
        TContext
      > => {

      const mutationOptions = getUpdateOrderStatusMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const cancelOrderMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `https://ur-commerce.runflare.run/orders/${id}/cancel`,undefined,options
    );
  }



export const getCancelOrderMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelOrderMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof cancelOrderMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['cancelOrderMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cancelOrderMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  cancelOrderMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CancelOrderMutationMutationResult = NonNullable<Awaited<ReturnType<typeof cancelOrderMutation>>>
    
    export type CancelOrderMutationMutationError = AxiosError<unknown>

    export const useCancelOrderMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelOrderMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof cancelOrderMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getCancelOrderMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createSendingWayMutation = (
    createSendingWayDto: CreateSendingWayDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/sending-ways`,
      createSendingWayDto,options
    );
  }



export const getCreateSendingWayMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSendingWayMutation>>, TError,{data: CreateSendingWayDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createSendingWayMutation>>, TError,{data: CreateSendingWayDto}, TContext> => {

const mutationKey = ['createSendingWayMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createSendingWayMutation>>, {data: CreateSendingWayDto}> = (props) => {
          const {data} = props ?? {};

          return  createSendingWayMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateSendingWayMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createSendingWayMutation>>>
    export type CreateSendingWayMutationMutationBody = CreateSendingWayDto
    export type CreateSendingWayMutationMutationError = AxiosError<unknown>

    export const useCreateSendingWayMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSendingWayMutation>>, TError,{data: CreateSendingWayDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createSendingWayMutation>>,
        TError,
        {data: CreateSendingWayDto},
        TContext
      > => {

      const mutationOptions = getCreateSendingWayMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findManyAndCountSendingWaysQuery = (
    params: FindManyAndCountSendingWaysQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FindManyAndCountSendingWaysQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/sending-ways`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindManyAndCountSendingWaysQueryQueryKey = (params: FindManyAndCountSendingWaysQueryParams,) => {
    return [`https://ur-commerce.runflare.run/sending-ways`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyAndCountSendingWaysQueryQueryOptions = <TData = Awaited<ReturnType<typeof findManyAndCountSendingWaysQuery>>, TError = AxiosError<unknown>>(params: FindManyAndCountSendingWaysQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountSendingWaysQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyAndCountSendingWaysQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyAndCountSendingWaysQuery>>> = ({ signal }) => findManyAndCountSendingWaysQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountSendingWaysQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindManyAndCountSendingWaysQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findManyAndCountSendingWaysQuery>>>
export type FindManyAndCountSendingWaysQueryQueryError = AxiosError<unknown>



export function useFindManyAndCountSendingWaysQuery<TData = Awaited<ReturnType<typeof findManyAndCountSendingWaysQuery>>, TError = AxiosError<unknown>>(
 params: FindManyAndCountSendingWaysQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountSendingWaysQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindManyAndCountSendingWaysQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findActiveSendingWaysQuery = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SendingWaysSerializer[]>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/sending-ways/active`,options
    );
  }


export const getFindActiveSendingWaysQueryQueryKey = () => {
    return [`https://ur-commerce.runflare.run/sending-ways/active`] as const;
    }

    
export const getFindActiveSendingWaysQueryQueryOptions = <TData = Awaited<ReturnType<typeof findActiveSendingWaysQuery>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findActiveSendingWaysQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindActiveSendingWaysQueryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findActiveSendingWaysQuery>>> = ({ signal }) => findActiveSendingWaysQuery({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findActiveSendingWaysQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindActiveSendingWaysQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findActiveSendingWaysQuery>>>
export type FindActiveSendingWaysQueryQueryError = AxiosError<unknown>



export function useFindActiveSendingWaysQuery<TData = Awaited<ReturnType<typeof findActiveSendingWaysQuery>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findActiveSendingWaysQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindActiveSendingWaysQueryQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findSendingWayByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SendingWaysSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/sending-ways/${id}`,options
    );
  }


export const getFindSendingWayByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/sending-ways/${id}`] as const;
    }

    
export const getFindSendingWayByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findSendingWayByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findSendingWayByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindSendingWayByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findSendingWayByIdQuery>>> = ({ signal }) => findSendingWayByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findSendingWayByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindSendingWayByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findSendingWayByIdQuery>>>
export type FindSendingWayByIdQueryQueryError = AxiosError<unknown>



export function useFindSendingWayByIdQuery<TData = Awaited<ReturnType<typeof findSendingWayByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findSendingWayByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindSendingWayByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateSendingWayMutation = (
    id: number,
    updateSendingWayDto: UpdateSendingWayDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `https://ur-commerce.runflare.run/sending-ways/${id}`,
      updateSendingWayDto,options
    );
  }



export const getUpdateSendingWayMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSendingWayMutation>>, TError,{id: number;data: UpdateSendingWayDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateSendingWayMutation>>, TError,{id: number;data: UpdateSendingWayDto}, TContext> => {

const mutationKey = ['updateSendingWayMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSendingWayMutation>>, {id: number;data: UpdateSendingWayDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateSendingWayMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateSendingWayMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateSendingWayMutation>>>
    export type UpdateSendingWayMutationMutationBody = UpdateSendingWayDto
    export type UpdateSendingWayMutationMutationError = AxiosError<unknown>

    export const useUpdateSendingWayMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSendingWayMutation>>, TError,{id: number;data: UpdateSendingWayDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateSendingWayMutation>>,
        TError,
        {id: number;data: UpdateSendingWayDto},
        TContext
      > => {

      const mutationOptions = getUpdateSendingWayMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteSendingWayMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/sending-ways/${id}`,options
    );
  }



export const getDeleteSendingWayMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSendingWayMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSendingWayMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteSendingWayMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSendingWayMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteSendingWayMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSendingWayMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSendingWayMutation>>>
    
    export type DeleteSendingWayMutationMutationError = AxiosError<unknown>

    export const useDeleteSendingWayMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSendingWayMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteSendingWayMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteSendingWayMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createPaymentMutation = (
    createPaymentDto: CreatePaymentDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CreatePaymentMutation200>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/payments/create`,
      createPaymentDto,options
    );
  }



export const getCreatePaymentMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPaymentMutation>>, TError,{data: CreatePaymentDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createPaymentMutation>>, TError,{data: CreatePaymentDto}, TContext> => {

const mutationKey = ['createPaymentMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPaymentMutation>>, {data: CreatePaymentDto}> = (props) => {
          const {data} = props ?? {};

          return  createPaymentMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePaymentMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createPaymentMutation>>>
    export type CreatePaymentMutationMutationBody = CreatePaymentDto
    export type CreatePaymentMutationMutationError = AxiosError<unknown>

    export const useCreatePaymentMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPaymentMutation>>, TError,{data: CreatePaymentDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createPaymentMutation>>,
        TError,
        {data: CreatePaymentDto},
        TContext
      > => {

      const mutationOptions = getCreatePaymentMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const verifyPaymentMutation = (
    verifyPaymentDto: VerifyPaymentDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaymentsSerializer>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/payments/verify`,
      verifyPaymentDto,options
    );
  }



export const getVerifyPaymentMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyPaymentMutation>>, TError,{data: VerifyPaymentDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof verifyPaymentMutation>>, TError,{data: VerifyPaymentDto}, TContext> => {

const mutationKey = ['verifyPaymentMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyPaymentMutation>>, {data: VerifyPaymentDto}> = (props) => {
          const {data} = props ?? {};

          return  verifyPaymentMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VerifyPaymentMutationMutationResult = NonNullable<Awaited<ReturnType<typeof verifyPaymentMutation>>>
    export type VerifyPaymentMutationMutationBody = VerifyPaymentDto
    export type VerifyPaymentMutationMutationError = AxiosError<unknown>

    export const useVerifyPaymentMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyPaymentMutation>>, TError,{data: VerifyPaymentDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof verifyPaymentMutation>>,
        TError,
        {data: VerifyPaymentDto},
        TContext
      > => {

      const mutationOptions = getVerifyPaymentMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const paymentCallbackMutation = (
    trackId: number,
    params: PaymentCallbackMutationParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `https://ur-commerce.runflare.run/payments/callback/${trackId}`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getPaymentCallbackMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentCallbackMutation>>, TError,{trackId: number;params: PaymentCallbackMutationParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof paymentCallbackMutation>>, TError,{trackId: number;params: PaymentCallbackMutationParams}, TContext> => {

const mutationKey = ['paymentCallbackMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof paymentCallbackMutation>>, {trackId: number;params: PaymentCallbackMutationParams}> = (props) => {
          const {trackId,params} = props ?? {};

          return  paymentCallbackMutation(trackId,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PaymentCallbackMutationMutationResult = NonNullable<Awaited<ReturnType<typeof paymentCallbackMutation>>>
    
    export type PaymentCallbackMutationMutationError = AxiosError<unknown>

    export const usePaymentCallbackMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof paymentCallbackMutation>>, TError,{trackId: number;params: PaymentCallbackMutationParams}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof paymentCallbackMutation>>,
        TError,
        {trackId: number;params: PaymentCallbackMutationParams},
        TContext
      > => {

      const mutationOptions = getPaymentCallbackMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getMyPaymentsQuery = (
    params: GetMyPaymentsQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetMyPaymentsQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/payments/my-payments`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetMyPaymentsQueryQueryKey = (params: GetMyPaymentsQueryParams,) => {
    return [`https://ur-commerce.runflare.run/payments/my-payments`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMyPaymentsQueryQueryOptions = <TData = Awaited<ReturnType<typeof getMyPaymentsQuery>>, TError = AxiosError<unknown>>(params: GetMyPaymentsQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyPaymentsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyPaymentsQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyPaymentsQuery>>> = ({ signal }) => getMyPaymentsQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyPaymentsQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMyPaymentsQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getMyPaymentsQuery>>>
export type GetMyPaymentsQueryQueryError = AxiosError<unknown>



export function useGetMyPaymentsQuery<TData = Awaited<ReturnType<typeof getMyPaymentsQuery>>, TError = AxiosError<unknown>>(
 params: GetMyPaymentsQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyPaymentsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMyPaymentsQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getPaymentByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaymentsSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/payments/${id}`,options
    );
  }


export const getGetPaymentByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/payments/${id}`] as const;
    }

    
export const getGetPaymentByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof getPaymentByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPaymentByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPaymentByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPaymentByIdQuery>>> = ({ signal }) => getPaymentByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPaymentByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPaymentByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getPaymentByIdQuery>>>
export type GetPaymentByIdQueryQueryError = AxiosError<unknown>



export function useGetPaymentByIdQuery<TData = Awaited<ReturnType<typeof getPaymentByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPaymentByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPaymentByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createWholeSellersRequestMutation = (
    createWholeSellersDto: CreateWholeSellersDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WholeSellersSerializer>> => {
    
    const formData = new FormData();
formData.append(`firstName`, createWholeSellersDto.firstName)
formData.append(`lastName`, createWholeSellersDto.lastName)
formData.append(`nationalCode`, createWholeSellersDto.nationalCode)
formData.append(`companyName`, createWholeSellersDto.companyName)
formData.append(`nationalCardPhoto`, createWholeSellersDto.nationalCardPhoto)
formData.append(`businessLicensePhoto`, createWholeSellersDto.businessLicensePhoto)
formData.append(`creditCardOrShaba`, createWholeSellersDto.creditCardOrShaba)

    return axios.post(
      `https://ur-commerce.runflare.run/whole-sellers`,
      formData,options
    );
  }



export const getCreateWholeSellersRequestMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWholeSellersRequestMutation>>, TError,{data: CreateWholeSellersDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createWholeSellersRequestMutation>>, TError,{data: CreateWholeSellersDto}, TContext> => {

const mutationKey = ['createWholeSellersRequestMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createWholeSellersRequestMutation>>, {data: CreateWholeSellersDto}> = (props) => {
          const {data} = props ?? {};

          return  createWholeSellersRequestMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateWholeSellersRequestMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createWholeSellersRequestMutation>>>
    export type CreateWholeSellersRequestMutationMutationBody = CreateWholeSellersDto
    export type CreateWholeSellersRequestMutationMutationError = AxiosError<unknown>

    export const useCreateWholeSellersRequestMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWholeSellersRequestMutation>>, TError,{data: CreateWholeSellersDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createWholeSellersRequestMutation>>,
        TError,
        {data: CreateWholeSellersDto},
        TContext
      > => {

      const mutationOptions = getCreateWholeSellersRequestMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findManyAndCountWholeSellersQuery = (
    params: FindManyAndCountWholeSellersQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FindManyAndCountWholeSellersQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/whole-sellers`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindManyAndCountWholeSellersQueryQueryKey = (params: FindManyAndCountWholeSellersQueryParams,) => {
    return [`https://ur-commerce.runflare.run/whole-sellers`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyAndCountWholeSellersQueryQueryOptions = <TData = Awaited<ReturnType<typeof findManyAndCountWholeSellersQuery>>, TError = AxiosError<unknown>>(params: FindManyAndCountWholeSellersQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountWholeSellersQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyAndCountWholeSellersQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyAndCountWholeSellersQuery>>> = ({ signal }) => findManyAndCountWholeSellersQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountWholeSellersQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindManyAndCountWholeSellersQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findManyAndCountWholeSellersQuery>>>
export type FindManyAndCountWholeSellersQueryQueryError = AxiosError<unknown>



export function useFindManyAndCountWholeSellersQuery<TData = Awaited<ReturnType<typeof findManyAndCountWholeSellersQuery>>, TError = AxiosError<unknown>>(
 params: FindManyAndCountWholeSellersQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyAndCountWholeSellersQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindManyAndCountWholeSellersQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getMyWholeSellersRequestQuery = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WholeSellersSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/whole-sellers/my-request`,options
    );
  }


export const getGetMyWholeSellersRequestQueryQueryKey = () => {
    return [`https://ur-commerce.runflare.run/whole-sellers/my-request`] as const;
    }

    
export const getGetMyWholeSellersRequestQueryQueryOptions = <TData = Awaited<ReturnType<typeof getMyWholeSellersRequestQuery>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyWholeSellersRequestQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMyWholeSellersRequestQueryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyWholeSellersRequestQuery>>> = ({ signal }) => getMyWholeSellersRequestQuery({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMyWholeSellersRequestQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMyWholeSellersRequestQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getMyWholeSellersRequestQuery>>>
export type GetMyWholeSellersRequestQueryQueryError = AxiosError<unknown>



export function useGetMyWholeSellersRequestQuery<TData = Awaited<ReturnType<typeof getMyWholeSellersRequestQuery>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMyWholeSellersRequestQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMyWholeSellersRequestQueryQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateMyWholeSellersRequestMutation = (
    updateWholeSellersDto: UpdateWholeSellersDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
if(updateWholeSellersDto.firstName !== undefined) {
 formData.append(`firstName`, updateWholeSellersDto.firstName)
 }
if(updateWholeSellersDto.lastName !== undefined) {
 formData.append(`lastName`, updateWholeSellersDto.lastName)
 }
if(updateWholeSellersDto.nationalCode !== undefined) {
 formData.append(`nationalCode`, updateWholeSellersDto.nationalCode)
 }
if(updateWholeSellersDto.companyName !== undefined) {
 formData.append(`companyName`, updateWholeSellersDto.companyName)
 }
if(updateWholeSellersDto.nationalCardPhoto !== undefined) {
 formData.append(`nationalCardPhoto`, updateWholeSellersDto.nationalCardPhoto)
 }
if(updateWholeSellersDto.businessLicensePhoto !== undefined) {
 formData.append(`businessLicensePhoto`, updateWholeSellersDto.businessLicensePhoto)
 }
if(updateWholeSellersDto.creditCardOrShaba !== undefined) {
 formData.append(`creditCardOrShaba`, updateWholeSellersDto.creditCardOrShaba)
 }

    return axios.put(
      `https://ur-commerce.runflare.run/whole-sellers/my-request`,
      formData,options
    );
  }



export const getUpdateMyWholeSellersRequestMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMyWholeSellersRequestMutation>>, TError,{data: UpdateWholeSellersDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateMyWholeSellersRequestMutation>>, TError,{data: UpdateWholeSellersDto}, TContext> => {

const mutationKey = ['updateMyWholeSellersRequestMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMyWholeSellersRequestMutation>>, {data: UpdateWholeSellersDto}> = (props) => {
          const {data} = props ?? {};

          return  updateMyWholeSellersRequestMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMyWholeSellersRequestMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateMyWholeSellersRequestMutation>>>
    export type UpdateMyWholeSellersRequestMutationMutationBody = UpdateWholeSellersDto
    export type UpdateMyWholeSellersRequestMutationMutationError = AxiosError<unknown>

    export const useUpdateMyWholeSellersRequestMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMyWholeSellersRequestMutation>>, TError,{data: UpdateWholeSellersDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateMyWholeSellersRequestMutation>>,
        TError,
        {data: UpdateWholeSellersDto},
        TContext
      > => {

      const mutationOptions = getUpdateMyWholeSellersRequestMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const checkMyWholeSellersStatusQuery = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CheckMyWholeSellersStatusQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/whole-sellers/check-my-status`,options
    );
  }


export const getCheckMyWholeSellersStatusQueryQueryKey = () => {
    return [`https://ur-commerce.runflare.run/whole-sellers/check-my-status`] as const;
    }

    
export const getCheckMyWholeSellersStatusQueryQueryOptions = <TData = Awaited<ReturnType<typeof checkMyWholeSellersStatusQuery>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof checkMyWholeSellersStatusQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCheckMyWholeSellersStatusQueryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof checkMyWholeSellersStatusQuery>>> = ({ signal }) => checkMyWholeSellersStatusQuery({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof checkMyWholeSellersStatusQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type CheckMyWholeSellersStatusQueryQueryResult = NonNullable<Awaited<ReturnType<typeof checkMyWholeSellersStatusQuery>>>
export type CheckMyWholeSellersStatusQueryQueryError = AxiosError<unknown>



export function useCheckMyWholeSellersStatusQuery<TData = Awaited<ReturnType<typeof checkMyWholeSellersStatusQuery>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof checkMyWholeSellersStatusQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getCheckMyWholeSellersStatusQueryQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const checkWholeSellersStatusByUserIdQuery = (
    userId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CheckWholeSellersStatusByUserIdQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/whole-sellers/check-status/${userId}`,options
    );
  }


export const getCheckWholeSellersStatusByUserIdQueryQueryKey = (userId: number,) => {
    return [`https://ur-commerce.runflare.run/whole-sellers/check-status/${userId}`] as const;
    }

    
export const getCheckWholeSellersStatusByUserIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof checkWholeSellersStatusByUserIdQuery>>, TError = AxiosError<unknown>>(userId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof checkWholeSellersStatusByUserIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCheckWholeSellersStatusByUserIdQueryQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof checkWholeSellersStatusByUserIdQuery>>> = ({ signal }) => checkWholeSellersStatusByUserIdQuery(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof checkWholeSellersStatusByUserIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type CheckWholeSellersStatusByUserIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof checkWholeSellersStatusByUserIdQuery>>>
export type CheckWholeSellersStatusByUserIdQueryQueryError = AxiosError<unknown>



export function useCheckWholeSellersStatusByUserIdQuery<TData = Awaited<ReturnType<typeof checkWholeSellersStatusByUserIdQuery>>, TError = AxiosError<unknown>>(
 userId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof checkWholeSellersStatusByUserIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getCheckWholeSellersStatusByUserIdQueryQueryOptions(userId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findWholeSellersRequestByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WholeSellersSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/whole-sellers/${id}`,options
    );
  }


export const getFindWholeSellersRequestByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/whole-sellers/${id}`] as const;
    }

    
export const getFindWholeSellersRequestByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findWholeSellersRequestByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findWholeSellersRequestByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindWholeSellersRequestByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findWholeSellersRequestByIdQuery>>> = ({ signal }) => findWholeSellersRequestByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findWholeSellersRequestByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindWholeSellersRequestByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findWholeSellersRequestByIdQuery>>>
export type FindWholeSellersRequestByIdQueryQueryError = AxiosError<unknown>



export function useFindWholeSellersRequestByIdQuery<TData = Awaited<ReturnType<typeof findWholeSellersRequestByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findWholeSellersRequestByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindWholeSellersRequestByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteWholeSellersRequestByIdMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/whole-sellers/${id}`,options
    );
  }



export const getDeleteWholeSellersRequestByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWholeSellersRequestByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteWholeSellersRequestByIdMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteWholeSellersRequestByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteWholeSellersRequestByIdMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteWholeSellersRequestByIdMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteWholeSellersRequestByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteWholeSellersRequestByIdMutation>>>
    
    export type DeleteWholeSellersRequestByIdMutationMutationError = AxiosError<unknown>

    export const useDeleteWholeSellersRequestByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteWholeSellersRequestByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteWholeSellersRequestByIdMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteWholeSellersRequestByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const adminUpdateWholeSellersStatusMutation = (
    id: number,
    adminUpdateWholeSellersDto: AdminUpdateWholeSellersDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.put(
      `https://ur-commerce.runflare.run/whole-sellers/admin-update/${id}`,
      adminUpdateWholeSellersDto,options
    );
  }



export const getAdminUpdateWholeSellersStatusMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adminUpdateWholeSellersStatusMutation>>, TError,{id: number;data: AdminUpdateWholeSellersDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof adminUpdateWholeSellersStatusMutation>>, TError,{id: number;data: AdminUpdateWholeSellersDto}, TContext> => {

const mutationKey = ['adminUpdateWholeSellersStatusMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminUpdateWholeSellersStatusMutation>>, {id: number;data: AdminUpdateWholeSellersDto}> = (props) => {
          const {id,data} = props ?? {};

          return  adminUpdateWholeSellersStatusMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AdminUpdateWholeSellersStatusMutationMutationResult = NonNullable<Awaited<ReturnType<typeof adminUpdateWholeSellersStatusMutation>>>
    export type AdminUpdateWholeSellersStatusMutationMutationBody = AdminUpdateWholeSellersDto
    export type AdminUpdateWholeSellersStatusMutationMutationError = AxiosError<unknown>

    export const useAdminUpdateWholeSellersStatusMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adminUpdateWholeSellersStatusMutation>>, TError,{id: number;data: AdminUpdateWholeSellersDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof adminUpdateWholeSellersStatusMutation>>,
        TError,
        {id: number;data: AdminUpdateWholeSellersDto},
        TContext
      > => {

      const mutationOptions = getAdminUpdateWholeSellersStatusMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createHeroBannerMutation = (
    createHeroBannerDto: CreateHeroBannerDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
formData.append(`image`, createHeroBannerDto.image)
if(createHeroBannerDto.linkUrl !== undefined) {
 formData.append(`linkUrl`, createHeroBannerDto.linkUrl)
 }
if(createHeroBannerDto.sortOrder !== undefined) {
 formData.append(`sortOrder`, createHeroBannerDto.sortOrder.toString())
 }

    return axios.post(
      `https://ur-commerce.runflare.run/hero-banners`,
      formData,options
    );
  }



export const getCreateHeroBannerMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createHeroBannerMutation>>, TError,{data: CreateHeroBannerDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createHeroBannerMutation>>, TError,{data: CreateHeroBannerDto}, TContext> => {

const mutationKey = ['createHeroBannerMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createHeroBannerMutation>>, {data: CreateHeroBannerDto}> = (props) => {
          const {data} = props ?? {};

          return  createHeroBannerMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateHeroBannerMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createHeroBannerMutation>>>
    export type CreateHeroBannerMutationMutationBody = CreateHeroBannerDto
    export type CreateHeroBannerMutationMutationError = AxiosError<unknown>

    export const useCreateHeroBannerMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createHeroBannerMutation>>, TError,{data: CreateHeroBannerDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createHeroBannerMutation>>,
        TError,
        {data: CreateHeroBannerDto},
        TContext
      > => {

      const mutationOptions = getCreateHeroBannerMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findManyHeroBannersQuery = (
    params: FindManyHeroBannersQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FindManyHeroBannersQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/hero-banners`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindManyHeroBannersQueryQueryKey = (params: FindManyHeroBannersQueryParams,) => {
    return [`https://ur-commerce.runflare.run/hero-banners`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyHeroBannersQueryQueryOptions = <TData = Awaited<ReturnType<typeof findManyHeroBannersQuery>>, TError = AxiosError<unknown>>(params: FindManyHeroBannersQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyHeroBannersQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyHeroBannersQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyHeroBannersQuery>>> = ({ signal }) => findManyHeroBannersQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyHeroBannersQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindManyHeroBannersQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findManyHeroBannersQuery>>>
export type FindManyHeroBannersQueryQueryError = AxiosError<unknown>



export function useFindManyHeroBannersQuery<TData = Awaited<ReturnType<typeof findManyHeroBannersQuery>>, TError = AxiosError<unknown>>(
 params: FindManyHeroBannersQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyHeroBannersQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindManyHeroBannersQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findHeroBannerByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HeroBannersSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/hero-banners/${id}`,options
    );
  }


export const getFindHeroBannerByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/hero-banners/${id}`] as const;
    }

    
export const getFindHeroBannerByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findHeroBannerByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findHeroBannerByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindHeroBannerByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findHeroBannerByIdQuery>>> = ({ signal }) => findHeroBannerByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findHeroBannerByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindHeroBannerByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findHeroBannerByIdQuery>>>
export type FindHeroBannerByIdQueryQueryError = AxiosError<unknown>



export function useFindHeroBannerByIdQuery<TData = Awaited<ReturnType<typeof findHeroBannerByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findHeroBannerByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindHeroBannerByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateHeroBannerByIdMutation = (
    id: number,
    updateHeroBannerDto: UpdateHeroBannerDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
if(updateHeroBannerDto.image !== undefined) {
 formData.append(`image`, updateHeroBannerDto.image)
 }
if(updateHeroBannerDto.linkUrl !== undefined) {
 formData.append(`linkUrl`, updateHeroBannerDto.linkUrl)
 }
if(updateHeroBannerDto.sortOrder !== undefined) {
 formData.append(`sortOrder`, updateHeroBannerDto.sortOrder.toString())
 }

    return axios.put(
      `https://ur-commerce.runflare.run/hero-banners/${id}`,
      formData,options
    );
  }



export const getUpdateHeroBannerByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateHeroBannerByIdMutation>>, TError,{id: number;data: UpdateHeroBannerDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateHeroBannerByIdMutation>>, TError,{id: number;data: UpdateHeroBannerDto}, TContext> => {

const mutationKey = ['updateHeroBannerByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateHeroBannerByIdMutation>>, {id: number;data: UpdateHeroBannerDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateHeroBannerByIdMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateHeroBannerByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateHeroBannerByIdMutation>>>
    export type UpdateHeroBannerByIdMutationMutationBody = UpdateHeroBannerDto
    export type UpdateHeroBannerByIdMutationMutationError = AxiosError<unknown>

    export const useUpdateHeroBannerByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateHeroBannerByIdMutation>>, TError,{id: number;data: UpdateHeroBannerDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateHeroBannerByIdMutation>>,
        TError,
        {id: number;data: UpdateHeroBannerDto},
        TContext
      > => {

      const mutationOptions = getUpdateHeroBannerByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteHeroBannerByIdMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/hero-banners/${id}`,options
    );
  }



export const getDeleteHeroBannerByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHeroBannerByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHeroBannerByIdMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteHeroBannerByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHeroBannerByIdMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteHeroBannerByIdMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteHeroBannerByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHeroBannerByIdMutation>>>
    
    export type DeleteHeroBannerByIdMutationMutationError = AxiosError<unknown>

    export const useDeleteHeroBannerByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHeroBannerByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteHeroBannerByIdMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteHeroBannerByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createApplicationBannerMutation = (
    createApplicationBannerDto: CreateApplicationBannerDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
if(createApplicationBannerDto.title !== undefined) {
 formData.append(`title`, createApplicationBannerDto.title)
 }
formData.append(`linkUrl`, createApplicationBannerDto.linkUrl)
if(createApplicationBannerDto.image !== undefined) {
 formData.append(`image`, createApplicationBannerDto.image)
 }
if(createApplicationBannerDto.sortOrder !== undefined) {
 formData.append(`sortOrder`, createApplicationBannerDto.sortOrder.toString())
 }
if(createApplicationBannerDto.group !== undefined) {
 formData.append(`group`, createApplicationBannerDto.group)
 }

    return axios.post(
      `https://ur-commerce.runflare.run/application-banners`,
      formData,options
    );
  }



export const getCreateApplicationBannerMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createApplicationBannerMutation>>, TError,{data: CreateApplicationBannerDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createApplicationBannerMutation>>, TError,{data: CreateApplicationBannerDto}, TContext> => {

const mutationKey = ['createApplicationBannerMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createApplicationBannerMutation>>, {data: CreateApplicationBannerDto}> = (props) => {
          const {data} = props ?? {};

          return  createApplicationBannerMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateApplicationBannerMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createApplicationBannerMutation>>>
    export type CreateApplicationBannerMutationMutationBody = CreateApplicationBannerDto
    export type CreateApplicationBannerMutationMutationError = AxiosError<unknown>

    export const useCreateApplicationBannerMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createApplicationBannerMutation>>, TError,{data: CreateApplicationBannerDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createApplicationBannerMutation>>,
        TError,
        {data: CreateApplicationBannerDto},
        TContext
      > => {

      const mutationOptions = getCreateApplicationBannerMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findManyApplicationBannersQuery = (
    params: FindManyApplicationBannersQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FindManyApplicationBannersQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/application-banners`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindManyApplicationBannersQueryQueryKey = (params: FindManyApplicationBannersQueryParams,) => {
    return [`https://ur-commerce.runflare.run/application-banners`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyApplicationBannersQueryQueryOptions = <TData = Awaited<ReturnType<typeof findManyApplicationBannersQuery>>, TError = AxiosError<unknown>>(params: FindManyApplicationBannersQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyApplicationBannersQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyApplicationBannersQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyApplicationBannersQuery>>> = ({ signal }) => findManyApplicationBannersQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyApplicationBannersQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindManyApplicationBannersQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findManyApplicationBannersQuery>>>
export type FindManyApplicationBannersQueryQueryError = AxiosError<unknown>



export function useFindManyApplicationBannersQuery<TData = Awaited<ReturnType<typeof findManyApplicationBannersQuery>>, TError = AxiosError<unknown>>(
 params: FindManyApplicationBannersQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyApplicationBannersQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindManyApplicationBannersQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findApplicationBannerByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApplicationBannersSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/application-banners/${id}`,options
    );
  }


export const getFindApplicationBannerByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/application-banners/${id}`] as const;
    }

    
export const getFindApplicationBannerByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findApplicationBannerByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findApplicationBannerByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindApplicationBannerByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findApplicationBannerByIdQuery>>> = ({ signal }) => findApplicationBannerByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findApplicationBannerByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindApplicationBannerByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findApplicationBannerByIdQuery>>>
export type FindApplicationBannerByIdQueryQueryError = AxiosError<unknown>



export function useFindApplicationBannerByIdQuery<TData = Awaited<ReturnType<typeof findApplicationBannerByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findApplicationBannerByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindApplicationBannerByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateApplicationBannerByIdMutation = (
    id: number,
    updateApplicationBannerDto: UpdateApplicationBannerDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
if(updateApplicationBannerDto.title !== undefined) {
 formData.append(`title`, updateApplicationBannerDto.title)
 }
if(updateApplicationBannerDto.linkUrl !== undefined) {
 formData.append(`linkUrl`, updateApplicationBannerDto.linkUrl)
 }
if(updateApplicationBannerDto.image !== undefined) {
 formData.append(`image`, updateApplicationBannerDto.image)
 }
if(updateApplicationBannerDto.sortOrder !== undefined) {
 formData.append(`sortOrder`, updateApplicationBannerDto.sortOrder.toString())
 }
if(updateApplicationBannerDto.group !== undefined) {
 formData.append(`group`, updateApplicationBannerDto.group)
 }

    return axios.put(
      `https://ur-commerce.runflare.run/application-banners/${id}`,
      formData,options
    );
  }



export const getUpdateApplicationBannerByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateApplicationBannerByIdMutation>>, TError,{id: number;data: UpdateApplicationBannerDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateApplicationBannerByIdMutation>>, TError,{id: number;data: UpdateApplicationBannerDto}, TContext> => {

const mutationKey = ['updateApplicationBannerByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateApplicationBannerByIdMutation>>, {id: number;data: UpdateApplicationBannerDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateApplicationBannerByIdMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateApplicationBannerByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateApplicationBannerByIdMutation>>>
    export type UpdateApplicationBannerByIdMutationMutationBody = UpdateApplicationBannerDto
    export type UpdateApplicationBannerByIdMutationMutationError = AxiosError<unknown>

    export const useUpdateApplicationBannerByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateApplicationBannerByIdMutation>>, TError,{id: number;data: UpdateApplicationBannerDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateApplicationBannerByIdMutation>>,
        TError,
        {id: number;data: UpdateApplicationBannerDto},
        TContext
      > => {

      const mutationOptions = getUpdateApplicationBannerByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteApplicationBannerByIdMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/application-banners/${id}`,options
    );
  }



export const getDeleteApplicationBannerByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApplicationBannerByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApplicationBannerByIdMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteApplicationBannerByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApplicationBannerByIdMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApplicationBannerByIdMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApplicationBannerByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApplicationBannerByIdMutation>>>
    
    export type DeleteApplicationBannerByIdMutationMutationError = AxiosError<unknown>

    export const useDeleteApplicationBannerByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApplicationBannerByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteApplicationBannerByIdMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteApplicationBannerByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createProductBrandCategoryMutation = (
    createProductBrandCategoryDto: CreateProductBrandCategoryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
formData.append(`title`, createProductBrandCategoryDto.title)
formData.append(`linkUrl`, createProductBrandCategoryDto.linkUrl)
if(createProductBrandCategoryDto.image !== undefined) {
 formData.append(`image`, createProductBrandCategoryDto.image)
 }

    return axios.post(
      `https://ur-commerce.runflare.run/product-brand-categories`,
      formData,options
    );
  }



export const getCreateProductBrandCategoryMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductBrandCategoryMutation>>, TError,{data: CreateProductBrandCategoryDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createProductBrandCategoryMutation>>, TError,{data: CreateProductBrandCategoryDto}, TContext> => {

const mutationKey = ['createProductBrandCategoryMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createProductBrandCategoryMutation>>, {data: CreateProductBrandCategoryDto}> = (props) => {
          const {data} = props ?? {};

          return  createProductBrandCategoryMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProductBrandCategoryMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createProductBrandCategoryMutation>>>
    export type CreateProductBrandCategoryMutationMutationBody = CreateProductBrandCategoryDto
    export type CreateProductBrandCategoryMutationMutationError = AxiosError<unknown>

    export const useCreateProductBrandCategoryMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createProductBrandCategoryMutation>>, TError,{data: CreateProductBrandCategoryDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createProductBrandCategoryMutation>>,
        TError,
        {data: CreateProductBrandCategoryDto},
        TContext
      > => {

      const mutationOptions = getCreateProductBrandCategoryMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findManyProductBrandCategoriesQuery = (
    params: FindManyProductBrandCategoriesQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FindManyProductBrandCategoriesQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-brand-categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindManyProductBrandCategoriesQueryQueryKey = (params: FindManyProductBrandCategoriesQueryParams,) => {
    return [`https://ur-commerce.runflare.run/product-brand-categories`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyProductBrandCategoriesQueryQueryOptions = <TData = Awaited<ReturnType<typeof findManyProductBrandCategoriesQuery>>, TError = AxiosError<unknown>>(params: FindManyProductBrandCategoriesQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyProductBrandCategoriesQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyProductBrandCategoriesQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyProductBrandCategoriesQuery>>> = ({ signal }) => findManyProductBrandCategoriesQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyProductBrandCategoriesQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindManyProductBrandCategoriesQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findManyProductBrandCategoriesQuery>>>
export type FindManyProductBrandCategoriesQueryQueryError = AxiosError<unknown>



export function useFindManyProductBrandCategoriesQuery<TData = Awaited<ReturnType<typeof findManyProductBrandCategoriesQuery>>, TError = AxiosError<unknown>>(
 params: FindManyProductBrandCategoriesQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyProductBrandCategoriesQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindManyProductBrandCategoriesQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findProductBrandCategoryByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductBrandCategoriesSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/product-brand-categories/${id}`,options
    );
  }


export const getFindProductBrandCategoryByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/product-brand-categories/${id}`] as const;
    }

    
export const getFindProductBrandCategoryByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findProductBrandCategoryByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findProductBrandCategoryByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindProductBrandCategoryByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findProductBrandCategoryByIdQuery>>> = ({ signal }) => findProductBrandCategoryByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findProductBrandCategoryByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindProductBrandCategoryByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findProductBrandCategoryByIdQuery>>>
export type FindProductBrandCategoryByIdQueryQueryError = AxiosError<unknown>



export function useFindProductBrandCategoryByIdQuery<TData = Awaited<ReturnType<typeof findProductBrandCategoryByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findProductBrandCategoryByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindProductBrandCategoryByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateProductBrandCategoryByIdMutation = (
    id: number,
    updateProductBrandCategoryDto: UpdateProductBrandCategoryDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
if(updateProductBrandCategoryDto.title !== undefined) {
 formData.append(`title`, updateProductBrandCategoryDto.title)
 }
if(updateProductBrandCategoryDto.linkUrl !== undefined) {
 formData.append(`linkUrl`, updateProductBrandCategoryDto.linkUrl)
 }
if(updateProductBrandCategoryDto.image !== undefined) {
 formData.append(`image`, updateProductBrandCategoryDto.image)
 }

    return axios.put(
      `https://ur-commerce.runflare.run/product-brand-categories/${id}`,
      formData,options
    );
  }



export const getUpdateProductBrandCategoryByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductBrandCategoryByIdMutation>>, TError,{id: number;data: UpdateProductBrandCategoryDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateProductBrandCategoryByIdMutation>>, TError,{id: number;data: UpdateProductBrandCategoryDto}, TContext> => {

const mutationKey = ['updateProductBrandCategoryByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProductBrandCategoryByIdMutation>>, {id: number;data: UpdateProductBrandCategoryDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateProductBrandCategoryByIdMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProductBrandCategoryByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updateProductBrandCategoryByIdMutation>>>
    export type UpdateProductBrandCategoryByIdMutationMutationBody = UpdateProductBrandCategoryDto
    export type UpdateProductBrandCategoryByIdMutationMutationError = AxiosError<unknown>

    export const useUpdateProductBrandCategoryByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductBrandCategoryByIdMutation>>, TError,{id: number;data: UpdateProductBrandCategoryDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateProductBrandCategoryByIdMutation>>,
        TError,
        {id: number;data: UpdateProductBrandCategoryDto},
        TContext
      > => {

      const mutationOptions = getUpdateProductBrandCategoryByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deleteProductBrandCategoryByIdMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/product-brand-categories/${id}`,options
    );
  }



export const getDeleteProductBrandCategoryByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductBrandCategoryByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductBrandCategoryByIdMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteProductBrandCategoryByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductBrandCategoryByIdMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteProductBrandCategoryByIdMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductBrandCategoryByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductBrandCategoryByIdMutation>>>
    
    export type DeleteProductBrandCategoryByIdMutationMutationError = AxiosError<unknown>

    export const useDeleteProductBrandCategoryByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductBrandCategoryByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductBrandCategoryByIdMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteProductBrandCategoryByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createPopularBrandMutation = (
    createPopularBrandDto: CreatePopularBrandDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
formData.append(`title`, createPopularBrandDto.title)
if(createPopularBrandDto.description !== undefined) {
 formData.append(`description`, createPopularBrandDto.description)
 }
if(createPopularBrandDto.linkUrl !== undefined) {
 formData.append(`linkUrl`, createPopularBrandDto.linkUrl)
 }
if(createPopularBrandDto.isActive !== undefined) {
 formData.append(`isActive`, createPopularBrandDto.isActive.toString())
 }
if(createPopularBrandDto.sortOrder !== undefined) {
 formData.append(`sortOrder`, createPopularBrandDto.sortOrder.toString())
 }
if(createPopularBrandDto.image !== undefined) {
 formData.append(`image`, createPopularBrandDto.image)
 }
if(createPopularBrandDto.secondImage !== undefined) {
 formData.append(`secondImage`, createPopularBrandDto.secondImage)
 }

    return axios.post(
      `https://ur-commerce.runflare.run/popular-brands`,
      formData,options
    );
  }



export const getCreatePopularBrandMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPopularBrandMutation>>, TError,{data: CreatePopularBrandDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createPopularBrandMutation>>, TError,{data: CreatePopularBrandDto}, TContext> => {

const mutationKey = ['createPopularBrandMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPopularBrandMutation>>, {data: CreatePopularBrandDto}> = (props) => {
          const {data} = props ?? {};

          return  createPopularBrandMutation(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePopularBrandMutationMutationResult = NonNullable<Awaited<ReturnType<typeof createPopularBrandMutation>>>
    export type CreatePopularBrandMutationMutationBody = CreatePopularBrandDto
    export type CreatePopularBrandMutationMutationError = AxiosError<unknown>

    export const useCreatePopularBrandMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPopularBrandMutation>>, TError,{data: CreatePopularBrandDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createPopularBrandMutation>>,
        TError,
        {data: CreatePopularBrandDto},
        TContext
      > => {

      const mutationOptions = getCreatePopularBrandMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const findManyPopularBrandsQuery = (
    params: FindManyPopularBrandsQueryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FindManyPopularBrandsQuery200>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/popular-brands`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getFindManyPopularBrandsQueryQueryKey = (params: FindManyPopularBrandsQueryParams,) => {
    return [`https://ur-commerce.runflare.run/popular-brands`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyPopularBrandsQueryQueryOptions = <TData = Awaited<ReturnType<typeof findManyPopularBrandsQuery>>, TError = AxiosError<unknown>>(params: FindManyPopularBrandsQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyPopularBrandsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyPopularBrandsQueryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyPopularBrandsQuery>>> = ({ signal }) => findManyPopularBrandsQuery(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyPopularBrandsQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindManyPopularBrandsQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findManyPopularBrandsQuery>>>
export type FindManyPopularBrandsQueryQueryError = AxiosError<unknown>



export function useFindManyPopularBrandsQuery<TData = Awaited<ReturnType<typeof findManyPopularBrandsQuery>>, TError = AxiosError<unknown>>(
 params: FindManyPopularBrandsQueryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findManyPopularBrandsQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindManyPopularBrandsQueryQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const findPopularBrandByIdQuery = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PopularBrandsSerializer>> => {
    
    
    return axios.get(
      `https://ur-commerce.runflare.run/popular-brands/${id}`,options
    );
  }


export const getFindPopularBrandByIdQueryQueryKey = (id: number,) => {
    return [`https://ur-commerce.runflare.run/popular-brands/${id}`] as const;
    }

    
export const getFindPopularBrandByIdQueryQueryOptions = <TData = Awaited<ReturnType<typeof findPopularBrandByIdQuery>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findPopularBrandByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindPopularBrandByIdQueryQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findPopularBrandByIdQuery>>> = ({ signal }) => findPopularBrandByIdQuery(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findPopularBrandByIdQuery>>, TError, TData> & { queryKey: QueryKey }
}

export type FindPopularBrandByIdQueryQueryResult = NonNullable<Awaited<ReturnType<typeof findPopularBrandByIdQuery>>>
export type FindPopularBrandByIdQueryQueryError = AxiosError<unknown>



export function useFindPopularBrandByIdQuery<TData = Awaited<ReturnType<typeof findPopularBrandByIdQuery>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findPopularBrandByIdQuery>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindPopularBrandByIdQueryQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updatePopularBrandByIdMutation = (
    id: number,
    updatePopularBrandDto: UpdatePopularBrandDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
if(updatePopularBrandDto.title !== undefined) {
 formData.append(`title`, updatePopularBrandDto.title)
 }
if(updatePopularBrandDto.description !== undefined) {
 formData.append(`description`, updatePopularBrandDto.description)
 }
if(updatePopularBrandDto.linkUrl !== undefined) {
 formData.append(`linkUrl`, updatePopularBrandDto.linkUrl)
 }
if(updatePopularBrandDto.isActive !== undefined) {
 formData.append(`isActive`, updatePopularBrandDto.isActive.toString())
 }
if(updatePopularBrandDto.sortOrder !== undefined) {
 formData.append(`sortOrder`, updatePopularBrandDto.sortOrder.toString())
 }
if(updatePopularBrandDto.image !== undefined) {
 formData.append(`image`, updatePopularBrandDto.image)
 }
if(updatePopularBrandDto.secondImage !== undefined) {
 formData.append(`secondImage`, updatePopularBrandDto.secondImage)
 }

    return axios.put(
      `https://ur-commerce.runflare.run/popular-brands/${id}`,
      formData,options
    );
  }



export const getUpdatePopularBrandByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePopularBrandByIdMutation>>, TError,{id: number;data: UpdatePopularBrandDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updatePopularBrandByIdMutation>>, TError,{id: number;data: UpdatePopularBrandDto}, TContext> => {

const mutationKey = ['updatePopularBrandByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePopularBrandByIdMutation>>, {id: number;data: UpdatePopularBrandDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updatePopularBrandByIdMutation(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePopularBrandByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof updatePopularBrandByIdMutation>>>
    export type UpdatePopularBrandByIdMutationMutationBody = UpdatePopularBrandDto
    export type UpdatePopularBrandByIdMutationMutationError = AxiosError<unknown>

    export const useUpdatePopularBrandByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePopularBrandByIdMutation>>, TError,{id: number;data: UpdatePopularBrandDto}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updatePopularBrandByIdMutation>>,
        TError,
        {id: number;data: UpdatePopularBrandDto},
        TContext
      > => {

      const mutationOptions = getUpdatePopularBrandByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const deletePopularBrandByIdMutation = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `https://ur-commerce.runflare.run/popular-brands/${id}`,options
    );
  }



export const getDeletePopularBrandByIdMutationMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePopularBrandByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deletePopularBrandByIdMutation>>, TError,{id: number}, TContext> => {

const mutationKey = ['deletePopularBrandByIdMutation'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePopularBrandByIdMutation>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deletePopularBrandByIdMutation(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePopularBrandByIdMutationMutationResult = NonNullable<Awaited<ReturnType<typeof deletePopularBrandByIdMutation>>>
    
    export type DeletePopularBrandByIdMutationMutationError = AxiosError<unknown>

    export const useDeletePopularBrandByIdMutation = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePopularBrandByIdMutation>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deletePopularBrandByIdMutation>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeletePopularBrandByIdMutationMutationOptions(options);

      return useMutation(mutationOptions );
    }
